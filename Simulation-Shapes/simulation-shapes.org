* Bow shock shapes from simulations
+ We will analyze some published synthetic observations from simulations
+ Do it exactly the same as for the real observations
  + Trace arc in ds9
  + Fit to find R0, R90 and Rc
  + Determine \Pi and \Lambda
** Convert screenshots to FITS
#+BEGIN_SRC sh :results silent
  for file in *-maps.png; do
      python ~/Work/Image2FITS/image2fits.py $file
  done
#+END_SRC
** Measure arcs on FITS images
+ Acreman figure
  + E.g., [[file:A16-20mic-i00-forma.reg]]
** Add a WCS to the FITS files
+ It turns out that =find-xy-shell.py= requires one
  + And it is easier to provide one than to re-write the program
#+BEGIN_SRC python
  from astropy.io import fits
  from astropy.wcs import WCS
  channels = ['red', 'green', 'blue']
  for channel in channels:
      hdulist = fits.open(f"Raga-1997-maps-{channel}.fits", mode="update")
      w = WCS(naxis=2)
      w.wcs.crpix = [0, 0]
      w.wcs.cdelt = [1.0/3600, 1.0/3600]
      w.wcs.crval = [30, -60]
      w.wcs.ctype = ["RA---AIR", "DEC--AIR"]
      hdulist[0].header = w.to_header()
      hdulist.flush()
      hdulist.close()
    
#+END_SRC

#+RESULTS:
: None

+ [X] Then we have to load each of the =.reg= files back in to ds9 and write them out again in wcs format

** Fit the arcs
+ Do it like in [[id:4BC292AA-F2EB-4031-94AB-E6A36B22FD21][Circle fits to second batch of sources]]

#+BEGIN_SRC sh :results silent
  D=../read-shapes-LL
  for wav in 20mic 12mic Halpha; do
      for inc in i00 i30 i60; do
          python $D/find-xy-shell.py A16-${wav}-${inc} --pa0 0 --window 9
      done
  done
#+END_SRC



#+BEGIN_SRC sh :results verbatim
  D=../read-shapes-LL
  python $D/find-xy-shell.py --help
#+END_SRC

#+RESULTS:
#+begin_example
usage: find-xy-shell.py [-h] [--debug] [--pa0 PA0] [--window WINDOW] source

Find (X, Y) positions of shell boundaries from a DS9 region file

positional arguments:
  source           Name of source, taken as prefix for region file containing
                   shell and star positions

optional arguments:
  -h, --help       show this help message and exit
  --debug          Print out verbose debugging info about each line in region
                   file
  --pa0 PA0        Optionally over-ride guess at PA of bow shock axis
  --window WINDOW  Number of points to use when searching for min R
#+end_example

#+BEGIN_SRC sh :results verbatim
  D=../read-shapes-LL
  python $D/fit-circle-shell.py --help
#+END_SRC

#+RESULTS:
#+begin_example
usage: fit-circle-shell.py [-h] [--savefig] [--debug] [--thmax THMAX] source

Fit circles to all the arcs and save as ds9 region file

positional arguments:
  source         Name of source

optional arguments:
  -h, --help     show this help message and exit
  --savefig      Save a figure showing the fit
  --debug        Print out verbose debugging info
  --thmax THMAX  Maximum angle from axis for points to include in circle fit
#+end_example


#+BEGIN_SRC sh :results verbatim
  D=../read-shapes-LL
  for wav in 20mic 12mic Halpha; do
      for inc in i00 i30 i60; do
          python $D/fit-circle-shell.py A16-${wav}-${inc} --thmax 60 --savefig --figscale 150
      done
  done
#+END_SRC

#+RESULTS:
#+begin_example
[[Fit Statistics]]
    # function evals   = 12
    # data points      = 9
    # variables        = 2
    chi-square         = 1.500
    reduced chi-square = 0.214
    Akaike info crit   = -12.125
    Bayesian info crit = -11.731
[[Variables]]
    xc:  -0.86827844 +/- 0.484223 (55.77%) (init=-1.415982)
    yc:  -43.0169955 +/- 3.451873 (8.02%) (init=-40.94287)
[[Correlations]] (unreported correlations are <  0.100)
outer : -0.868278445549 -43.0169955505 83.9520885522
[[Fit Statistics]]
    # function evals   = 15
    # data points      = 9
    # variables        = 2
    chi-square         = 0.952
    reduced chi-square = 0.136
    Akaike info crit   = -16.222
    Bayesian info crit = -15.828
[[Variables]]
    xc:   0.26327242 +/- 0.440482 (167.31%) (init= 0.1885513)
    yc:  -56.6615451 +/- 3.378267 (5.96%) (init=-40.43253)
[[Correlations]] (unreported correlations are <  0.100)
outer : 0.263272420544 -56.6615451113 97.2688410428
[[Fit Statistics]]
    # function evals   = 21
    # data points      = 10
    # variables        = 2
    chi-square         = 12.096
    reduced chi-square = 1.512
    Akaike info crit   = 5.903
    Bayesian info crit = 6.508
[[Variables]]
    xc:  -0.94112604 +/- 2.550386 (270.99%) (init= 0.64284)
    yc:  -169.000042 +/- 51.30050 (30.36%) (init=-43.32933)
[[Correlations]] (unreported correlations are <  0.100)
outer : -0.941126046004 -169.000042284 214.24326031
[[Fit Statistics]]
    # function evals   = 15
    # data points      = 30
    # variables        = 2
    chi-square         = 3.663
    reduced chi-square = 0.131
    Akaike info crit   = -59.089
    Bayesian info crit = -56.287
[[Variables]]
    xc:  -1.88017148 +/- 0.211841 (11.27%) (init=-1.455069)
    yc:  -70.7512435 +/- 2.054985 (2.90%) (init=-44.26959)
[[Correlations]] (unreported correlations are <  0.100)
    C(xc, yc)                    =  0.181 
outer : -1.88017148162 -70.7512435821 114.932519062
[[Fit Statistics]]
    # function evals   = 15
    # data points      = 22
    # variables        = 2
    chi-square         = 9.569
    reduced chi-square = 0.478
    Akaike info crit   = -14.316
    Bayesian info crit = -12.134
[[Variables]]
    xc:  -2.02239761 +/- 0.530814 (26.25%) (init= 0.1877718)
    yc:  -77.6627673 +/- 5.505573 (7.09%) (init=-41.52165)
[[Correlations]] (unreported correlations are <  0.100)
outer : -2.02239761853 -77.6627673223 120.48605475
[[Fit Statistics]]
    # function evals   = 12
    # data points      = 12
    # variables        = 2
    chi-square         = 9.543
    reduced chi-square = 0.954
    Akaike info crit   = 1.251
    Bayesian info crit = 2.221
[[Variables]]
    xc:  -3.19000930 +/- 0.650585 (20.39%) (init=-2.587487)
    yc:  -48.1391239 +/- 6.356706 (13.20%) (init=-53.83477)
[[Correlations]] (unreported correlations are <  0.100)
    C(xc, yc)                    =  0.151 
outer : -3.19000930802 -48.1391239766 102.461613882
[[Fit Statistics]]
    # function evals   = 15
    # data points      = 15
    # variables        = 2
    chi-square         = 75.590
    reduced chi-square = 5.815
    Akaike info crit   = 28.259
    Bayesian info crit = 29.675
[[Variables]]
    xc:  -0.90720240 +/- 1.526846 (168.30%) (init=-1.735478)
    yc:  -42.2411966 +/- 9.675294 (22.90%) (init=-52.12203)
[[Correlations]] (unreported correlations are <  0.100)
outer : -0.907202408862 -42.241196604 95.2588341179
[[Fit Statistics]]
    # function evals   = 15
    # data points      = 12
    # variables        = 2
    chi-square         = 2.646
    reduced chi-square = 0.265
    Akaike info crit   = -14.140
    Bayesian info crit = -13.170
[[Variables]]
    xc:  -0.49692657 +/- 0.510309 (102.69%) (init=-0.8667289)
    yc:  -77.9597925 +/- 3.784126 (4.85%) (init=-62.6494)
[[Correlations]] (unreported correlations are <  0.100)
    C(xc, yc)                    =  0.260 
outer : -0.496926576525 -77.9597925915 141.013742592
[[Fit Statistics]]
    # function evals   = 18
    # data points      = 12
    # variables        = 2
    chi-square         = 19.731
    reduced chi-square = 1.973
    Akaike info crit   = 9.968
    Bayesian info crit = 10.937
[[Variables]]
    xc:   0.03098664 +/- 0.915668 (2955.04%) (init=-1.467732)
    yc:  -29.9301989 +/- 4.449084 (14.86%) (init=-80.68895)
[[Correlations]] (unreported correlations are <  0.100)
    C(xc, yc)                    = -0.104 
outer : 0.0309866408166 -29.930198911 110.304078185
#+end_example


#+BEGIN_SRC sh :results verbatim
  D=../read-shapes-LL
  python $D/find-xy-shell.py R97-Halpha-i00 --pa0 90 --window 9
  python $D/fit-circle-shell.py R97-Halpha-i00 --thmax 60 --savefig --figscale 300
#+END_SRC

#+RESULTS:
#+begin_example
[[Fit Statistics]]
    # function evals   = 18
    # data points      = 7
    # variables        = 2
    chi-square         = 140.998
    reduced chi-square = 28.200
    Akaike info crit   = 25.020
    Bayesian info crit = 24.912
[[Variables]]
    xc:  -47.9081712 +/- 27.37979 (57.15%) (init=-91.68763)
    yc:  -2.14965635 +/- 4.968434 (231.13%) (init=-1.367659)
[[Correlations]] (unreported correlations are <  0.100)
    C(xc, yc)                    =  0.267 
outer : -47.9081712238 -2.14965635401 142.082194775
#+end_example


** Plot the planitude--alatude

*** Harvest the shape parameters from the JSON files
+ Do it like in [[id:A3F62646-04B8-448B-91FF-8E1DC04A9C41][The red supergiants and AGB stars]]

#+BEGIN_SRC sh :results verbatim
ls *.json |cut -d'-' -f1-3
#+END_SRC

#+RESULTS:
#+begin_example
A16-12mic-i00
A16-12mic-i30
A16-12mic-i60
A16-20mic-i00
A16-20mic-i30
A16-20mic-i60
A16-Halpha-i00
A16-Halpha-i30
A16-Halpha-i60
R97-Halpha-i00
#+end_example

#+name: harvest-radii-sims
#+BEGIN_SRC python :return table
  import json

  SOURCES = [
      "A16-12mic-i00", 
      "A16-12mic-i30", 
      "A16-12mic-i60", 
      "A16-20mic-i00", 
      "A16-20mic-i30", 
      "A16-20mic-i60", 
      "A16-Halpha-i00", 
      "A16-Halpha-i30", 
      "A16-Halpha-i60", 
      "R97-Halpha-i00", 
  ]

  radii_header = ['R0/100', 'Rc/R0', 'R90/R0', 'Rm90/R0']
  header = [['Source', *radii_header], None]
  INVALID = -999.00
  body = []
  for source in SOURCES:
      jfile = f'{source}-arcdata.json'
      data = json.load(open(jfile))
      assert source == data['star']['id']
      D = data['star']['D']
      row = [source]
      arc = 'outer'
      if arc in data:
          R0 = data[arc]['R0']
          Rc = data[arc]['Rc'] / R0
          if 'R90' in data[arc]:
              Rm90, R90 = data[arc]['R90']
              if Rm90 > 0.0:
                  Rm90 /= R0
              if R90 > 0.0:
                  R90 /= R0
          else:
              Rm90, R90 = INVALID, INVALID
          row += [f'{_:.2f}' for _ in [R0/100.0, Rc, Rm90, R90]]
      else:
          row += [f'{_:.2f}' for _ in [INVALID, INVALID, INVALID, INVALID]]
      body.append(row)

  #body.sort(key=lambda x: x[0])
  table = header + body

#+END_SRC

#+RESULTS: harvest-radii-sims
| Source         | R0/100 | Rc/R0 | R90/R0 | Rm90/R0 |
|----------------+--------+-------+--------+---------|
| A16-12mic-i00  |   0.44 |  2.59 |   1.69 |    1.69 |
| A16-12mic-i30  |   0.42 |  2.90 |   1.97 |    1.88 |
| A16-12mic-i60  |   0.54 |  1.90 |   1.45 |    1.42 |
| A16-20mic-i00  |   0.41 |  2.05 |   1.75 |    1.87 |
| A16-20mic-i30  |   0.40 |  2.41 |   1.96 |    1.97 |
| A16-20mic-i60  |   0.43 |  4.94 |   1.78 |    1.82 |
| A16-Halpha-i00 |   0.52 |  1.83 |   1.57 |    1.79 |
| A16-Halpha-i30 |   0.63 |  2.25 |   1.53 |    1.54 |
| A16-Halpha-i60 |   0.81 |  1.37 |   1.38 |    1.38 |
| R97-Halpha-i00 |   0.92 |  1.55 |   2.16 |    2.09 |

*** Make the plot
#+header: :var T=harvest-radii-sims :colnames no
#+BEGIN_SRC python :eval no :tangle sims-planitude-alatude.py
  import sys
  import numpy as np
  from scipy.interpolate import interp1d
  import statsmodels.api as sm
  from astropy.table import Table
  from matplotlib import pyplot as plt
  import matplotlib.ticker
  import seaborn as sns
  sys.path.append("../Dust-wave")
  import bow_projection as bp
  import bow_diagnostic


  plotfile = sys.argv[0].replace('.py', '.pdf')

  table = Table(rows=T[1:], names=T[0], dtype=[str] + [float]*4)

  # Take average +/- std of the +ve and -ve R90
  R90stack = np.stack([table['R90/R0'], table['Rm90/R0']])
  table['R90'] = np.nanmean(R90stack, axis=0)
  table['dR90'] = np.nanstd(R90stack, axis=0)
  table.remove_columns(['R90/R0', 'Rm90/R0'])

  sns.set_style('ticks')
  fig, ax = plt.subplots(figsize=(4, 4))

  Rc_grid = np.linspace(0.0, 10.0, 2000)
  R90_T0_grid = np.sqrt(2*Rc_grid)
  R90_T1_grid = np.sqrt(2*Rc_grid - 1.0)
  R90_T1_grid[~np.isfinite(R90_T1_grid)] = 0.0 

  ax.fill_between(Rc_grid, R90_T1_grid, R90_T0_grid, color='k', alpha=0.2)
  ax.fill_between(Rc_grid, R90_T0_grid, color='k', alpha=0.1)
  ax.plot(Rc_grid, R90_T0_grid, c='k', lw=0.5)
  ax.axhline(1.0, lw=0.5, alpha=0.5, color='k', zorder=-1)
  ax.axvline(1.0, lw=0.5, alpha=0.5, color='k', zorder=-1)
  ax.plot([0.0, 10.0], [0.0, 10.0], lw=0.5, alpha=0.5, color='k', zorder=-1)

  # Put a cross at the Wilkinoid coordinates: [5/3, sqrt(3)]
  ax.plot([5./3.], [np.sqrt(3.0)], '+', c='w', ms=10, alpha=1.0)
  # And plot the projected wilkinoids 
  bp.N_NEIGHBORHOOD = 50
  bp.DEGREE_POLY_NEIGHBORHOOD = 2
  bp.SCALE_NEIGHBORHOOD = 0.03
  bp.DEGREE_POLY_NEIGHBORHOOD_90 = 2
  bp.SCALE_NEIGHBORHOOD_90 = 0.01
  shape = bp.wilkinoid_R_theta
  th_inf = bp.theta_infinity(shape)
  inc = np.linspace(0.0, th_inf - np.pi/2, 50)
  tab = bow_diagnostic.parameter_table(inc, shape)
  Rc, R90 = tab['tilde R_c prime'], tab['tilde R_90 prime']
  ax.plot(Rc, R90, '-', c='w', label="_nolabel_", lw=0.6, alpha=0.9)
  sini = (0.5 + np.arange(20))/20
  inc_e = np.arcsin(sini)
  tab_e = bow_diagnostic.parameter_table(inc_e, shape)
  Rc_e, R90_e = tab_e['tilde R_c prime'], tab_e['tilde R_90 prime']
  ax.scatter(Rc_e, R90_e, marker='|', s=3**2,
             linewidths=0.1, edgecolors='none',
             c='w', alpha=0.5, label="_nolabel_")


  models = ["A16-12mic", "A16-20mic", "A16-Halpha", "R97-Halpha"]

  colors = sns.color_palette(n_colors=len(models))
  for model, color in zip(models, colors):
      mask = [s.startswith(model) for s in table['Source']]
      data = table[mask]
      ax.plot(data['Rc/R0'], data['R90'], '-', c=color, label=model, lw=1.5, alpha=0.9)
      # Put a dot at the i=0 case
      ax.plot(data['Rc/R0'][0:1], data['R90'][0:1], 'o', mec='none', c=color, label="_nolabel_", alpha=0.7)



  ax.legend(ncol=1, fontsize='small', title='Simulations',
            frameon=True, loc="lower right")
  ax.set(
      xlim=[0.0, 5.1],
      ylim=[0.0, 5.1],
      yticks=range(6),
  #    ylim=[-3.0, 1.1],
      xlabel=r"Projected planitude: $\Pi'$",
      ylabel=r"Projected alatude: $\Lambda'$",
  )        

  sns.despine()
  fig.tight_layout(pad=0.5)
  fig.savefig(plotfile)
  print(plotfile, end='')


#+END_SRC

#+BEGIN_SRC sh :results file
python sims-planitude-alatude.py
#+END_SRC

#+RESULTS:
[[file:sims-planitude-alatude.pdf]]
