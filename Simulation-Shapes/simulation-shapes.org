* Copy figures to paper folder
#+BEGIN_SRC sh :results verbatim
date
cp -v shape-conic-plot-M16-MS2070n00p10.pdf ../papers/Paper1/figs
#+END_SRC

#+RESULTS:
: Sun Nov 26 22:16:04 CST 2017
: shape-conic-plot-M16-MS2070n00p10.pdf -> ../papers/Paper1/figs/shape-conic-plot-M16-MS2070n00p10.pdf




* Bow shock shapes from simulations
+ We will analyze some published synthetic observations from simulations
+ Do it exactly the same as for the real observations
  + Trace arc in ds9
  + Fit to find R0, R90 and Rc
  + Determine \Pi and \Lambda
** Get more simulations
+ [X] We have Acreman 2016
  + One model in 3 bands (Ha, 12 \mu{}m, 20 \mu{}m) for 3 angles (0, 30, 60)
+ [X] We have Raga 1997
  + One model in 1 band (H\alpha) for i=0 only
+ [ ] Potentially we have Meyer 2014
  + Many models in 2 bands (H\alpha and generic dust) for i=0 only
+ [X] And there is Meyer 2016
  + 3 models (n = 0.1, 1, 10 for 20 Msun and 70 km/s), two bands (H\alpha and [O III]), five angles (0, 30, 45, 60, 90), where first comes from density map, and 90 is useless obviously.
  + This looks the best bet
    + We can get the full shape from the density maps, which extend out to \theta = 140 or so
    + The fit some conics and do predicted projection and actual projection for 30, 45, 60
  + *But* there is a flaw
    + Their projected maps have only been calculated using that part of the grid with \theta < 90
    + This means that we cannot find \Lambda' because they are forcing that R_90' = R_90 for all i, which means that \Lambda' will appear to fall because R_0' is increasing.
    + Whereas in reality, \Lambda' will come from shell at \theta_90(i), which is > 90 deg
    + Still we could show this as a warning
+ [ ] Finally there is Meyer 2017 with magnetic fields
  + This eliminates the conduction rubbish
  + And also gives a wider variety of shapes
  + Thirdly, they fix the flaw in the 2016 paper of only considering \theta < 90, so we should be able to really compare the \Pi' and \Lambda' from the simulated maps at different inclinations with the predictions from the shape
  + Their Fig 10 compares MHD and HD simulations of the same star with emission maps of dust in various FIR wave bands, for i = 30, 45, 60, 90
    + The Ha and [O III] emission for the same models are given in Fig 7 for i = 0
    + The density structure is given in Fig 3
  + So plan is
    1. [X] Trace the CD from the density images, following a contour
       - This gives the R(\theta), which can be plotted as \Delta(\mu)
    2. [ ] Extrapolate to give a full shape
       - Use that to predict \Pi', \Lambda' as function of inclination
    3. [ ] Trace the 60 micron images to find \Pi', \Lambda' for the inclinations 30, 45, 60
       - Compare with the previous


** Convert screenshots to FITS
#+BEGIN_SRC sh :results silent
  for file in *-maps.png; do
      python ~/Work/Image2FITS/image2fits.py $file
  done
#+END_SRC

New ones from Meyer (2016)
#+BEGIN_SRC sh :results silent
  for file in Meyer-2016-MS2070*.png; do
      python ~/Work/Image2FITS/image2fits.py $file
  done
#+END_SRC

New ones from Meyer (2017)
#+BEGIN_SRC sh :results silent
  for file in Meyer-2017-*.png; do
      python ~/Work/Image2FITS/image2fits.py $file
  done
#+END_SRC

** Measure arcs on FITS images
+ Acreman figure
  + E.g., [[file:A16-20mic-i00-forma.reg]]
** Add a WCS to the FITS files
+ It turns out that =find-xy-shell.py= requires one
  + And it is easier to provide one than to re-write the program
#+BEGIN_SRC python :eval no :tangle add-wcs-to-screenshot.py
  import sys
  from astropy.io import fits
  from astropy.wcs import WCS

  try: 
      prefix = sys.argv[1]
  except:
      sys.exit(f"Usage: {sys.argv[0]} PREFIX")

  channels = ['red', 'green', 'blue']
  for channel in channels:
      hdulist = fits.open(f"{prefix}-{channel}.fits", mode="update")
      w = WCS(naxis=2)
      w.wcs.crpix = [0, 0]
      w.wcs.cdelt = [1.0/3600, 1.0/3600]
      w.wcs.crval = [30, -60]
      w.wcs.ctype = ["RA---AIR", "DEC--AIR"]
      hdulist[0].header = w.to_header()
      hdulist.flush()
      hdulist.close()

#+END_SRC

#+BEGIN_SRC sh :results verbatim
  for file in Meyer-2016-MS2070*.png; do
      python add-wcs-to-screenshot.py ${file%%.png}
  done
#+END_SRC

#+BEGIN_SRC sh :results verbatim
  for file in Meyer-2017-*.png; do
      python add-wcs-to-screenshot.py ${file%%.png}
  done
#+END_SRC

#+RESULTS:

+ [X] Then we have to load each of the =.reg= files back in to ds9 and write them out again in wcs format

** Fit the arcs
+ Do it like in [[id:4BC292AA-F2EB-4031-94AB-E6A36B22FD21][Circle fits to second batch of sources]]

#+BEGIN_SRC sh :results silent
  D=../read-shapes-LL
  for wav in 20mic 12mic Halpha; do
      for inc in i00 i30 i60; do
          python $D/find-xy-shell.py A16-${wav}-${inc} --pa0 0 --window 9
      done
  done
#+END_SRC



#+BEGIN_SRC sh :results verbatim
  D=../read-shapes-LL
  python $D/find-xy-shell.py --help
#+END_SRC

#+RESULTS:
#+begin_example
usage: find-xy-shell.py [-h] [--debug] [--pa0 PA0] [--window WINDOW] source

Find (X, Y) positions of shell boundaries from a DS9 region file

positional arguments:
  source           Name of source, taken as prefix for region file containing
                   shell and star positions

optional arguments:
  -h, --help       show this help message and exit
  --debug          Print out verbose debugging info about each line in region
                   file
  --pa0 PA0        Optionally over-ride guess at PA of bow shock axis
  --window WINDOW  Number of points to use when searching for min R
#+end_example

#+BEGIN_SRC sh :results verbatim
  D=../read-shapes-LL
  python $D/fit-circle-shell.py --help
#+END_SRC

#+RESULTS:
#+begin_example
usage: fit-circle-shell.py [-h] [--savefig] [--debug] [--thmax THMAX] source

Fit circles to all the arcs and save as ds9 region file

positional arguments:
  source         Name of source

optional arguments:
  -h, --help     show this help message and exit
  --savefig      Save a figure showing the fit
  --debug        Print out verbose debugging info
  --thmax THMAX  Maximum angle from axis for points to include in circle fit
#+end_example


#+BEGIN_SRC sh :results verbatim
  D=../read-shapes-LL
  for wav in 20mic 12mic Halpha; do
      for inc in i00 i30 i60; do
          python $D/fit-circle-shell.py A16-${wav}-${inc} --thmax 60 --savefig --figscale 150
      done
  done
#+END_SRC

#+RESULTS:
#+begin_example
[[Fit Statistics]]
    # function evals   = 12
    # data points      = 9
    # variables        = 2
    chi-square         = 1.500
    reduced chi-square = 0.214
    Akaike info crit   = -12.125
    Bayesian info crit = -11.731
[[Variables]]
    xc:  -0.86827844 +/- 0.484223 (55.77%) (init=-1.415982)
    yc:  -43.0169955 +/- 3.451873 (8.02%) (init=-40.94287)
[[Correlations]] (unreported correlations are <  0.100)
outer : -0.868278445549 -43.0169955505 83.9520885522
[[Fit Statistics]]
    # function evals   = 15
    # data points      = 9
    # variables        = 2
    chi-square         = 0.952
    reduced chi-square = 0.136
    Akaike info crit   = -16.222
    Bayesian info crit = -15.828
[[Variables]]
    xc:   0.26327242 +/- 0.440482 (167.31%) (init= 0.1885513)
    yc:  -56.6615451 +/- 3.378267 (5.96%) (init=-40.43253)
[[Correlations]] (unreported correlations are <  0.100)
outer : 0.263272420544 -56.6615451113 97.2688410428
[[Fit Statistics]]
    # function evals   = 21
    # data points      = 10
    # variables        = 2
    chi-square         = 12.096
    reduced chi-square = 1.512
    Akaike info crit   = 5.903
    Bayesian info crit = 6.508
[[Variables]]
    xc:  -0.94112604 +/- 2.550386 (270.99%) (init= 0.64284)
    yc:  -169.000042 +/- 51.30050 (30.36%) (init=-43.32933)
[[Correlations]] (unreported correlations are <  0.100)
outer : -0.941126046004 -169.000042284 214.24326031
[[Fit Statistics]]
    # function evals   = 15
    # data points      = 30
    # variables        = 2
    chi-square         = 3.663
    reduced chi-square = 0.131
    Akaike info crit   = -59.089
    Bayesian info crit = -56.287
[[Variables]]
    xc:  -1.88017148 +/- 0.211841 (11.27%) (init=-1.455069)
    yc:  -70.7512435 +/- 2.054985 (2.90%) (init=-44.26959)
[[Correlations]] (unreported correlations are <  0.100)
    C(xc, yc)                    =  0.181 
outer : -1.88017148162 -70.7512435821 114.932519062
[[Fit Statistics]]
    # function evals   = 15
    # data points      = 22
    # variables        = 2
    chi-square         = 9.569
    reduced chi-square = 0.478
    Akaike info crit   = -14.316
    Bayesian info crit = -12.134
[[Variables]]
    xc:  -2.02239761 +/- 0.530814 (26.25%) (init= 0.1877718)
    yc:  -77.6627673 +/- 5.505573 (7.09%) (init=-41.52165)
[[Correlations]] (unreported correlations are <  0.100)
outer : -2.02239761853 -77.6627673223 120.48605475
[[Fit Statistics]]
    # function evals   = 12
    # data points      = 12
    # variables        = 2
    chi-square         = 9.543
    reduced chi-square = 0.954
    Akaike info crit   = 1.251
    Bayesian info crit = 2.221
[[Variables]]
    xc:  -3.19000930 +/- 0.650585 (20.39%) (init=-2.587487)
    yc:  -48.1391239 +/- 6.356706 (13.20%) (init=-53.83477)
[[Correlations]] (unreported correlations are <  0.100)
    C(xc, yc)                    =  0.151 
outer : -3.19000930802 -48.1391239766 102.461613882
[[Fit Statistics]]
    # function evals   = 15
    # data points      = 15
    # variables        = 2
    chi-square         = 75.590
    reduced chi-square = 5.815
    Akaike info crit   = 28.259
    Bayesian info crit = 29.675
[[Variables]]
    xc:  -0.90720240 +/- 1.526846 (168.30%) (init=-1.735478)
    yc:  -42.2411966 +/- 9.675294 (22.90%) (init=-52.12203)
[[Correlations]] (unreported correlations are <  0.100)
outer : -0.907202408862 -42.241196604 95.2588341179
[[Fit Statistics]]
    # function evals   = 15
    # data points      = 12
    # variables        = 2
    chi-square         = 2.646
    reduced chi-square = 0.265
    Akaike info crit   = -14.140
    Bayesian info crit = -13.170
[[Variables]]
    xc:  -0.49692657 +/- 0.510309 (102.69%) (init=-0.8667289)
    yc:  -77.9597925 +/- 3.784126 (4.85%) (init=-62.6494)
[[Correlations]] (unreported correlations are <  0.100)
    C(xc, yc)                    =  0.260 
outer : -0.496926576525 -77.9597925915 141.013742592
[[Fit Statistics]]
    # function evals   = 18
    # data points      = 12
    # variables        = 2
    chi-square         = 19.731
    reduced chi-square = 1.973
    Akaike info crit   = 9.968
    Bayesian info crit = 10.937
[[Variables]]
    xc:   0.03098664 +/- 0.915668 (2955.04%) (init=-1.467732)
    yc:  -29.9301989 +/- 4.449084 (14.86%) (init=-80.68895)
[[Correlations]] (unreported correlations are <  0.100)
    C(xc, yc)                    = -0.104 
outer : 0.0309866408166 -29.930198911 110.304078185
#+end_example


#+BEGIN_SRC sh :results verbatim
  D=../read-shapes-LL
  python $D/find-xy-shell.py R97-Halpha-i00 --pa0 90 --window 9
  python $D/fit-circle-shell.py R97-Halpha-i00 --thmax 60 --savefig --figscale 300
#+END_SRC

#+RESULTS:
#+begin_example
[[Fit Statistics]]
    # function evals   = 18
    # data points      = 7
    # variables        = 2
    chi-square         = 140.998
    reduced chi-square = 28.200
    Akaike info crit   = 25.020
    Bayesian info crit = 24.912
[[Variables]]
    xc:  -47.9081712 +/- 27.37979 (57.15%) (init=-91.68763)
    yc:  -2.14965635 +/- 4.968434 (231.13%) (init=-1.367659)
[[Correlations]] (unreported correlations are <  0.100)
    C(xc, yc)                    =  0.267 
outer : -47.9081712238 -2.14965635401 142.082194775
#+end_example

** Fit arcs to Meyer 2017 shapes
#+BEGIN_SRC sh :results verbatim
  D=../read-shapes-LL
  python $D/find-xy-shell.py M17-MHD2040-AllB7 --pa0 0 --window 11
  python $D/fit-circle-shell.py M17-MHD2040-AllB7 --thmax 60 --savefig --figscale 200
#+END_SRC

#+RESULTS:
#+begin_example
[[Fit Statistics]]
    # function evals   = 18
    # data points      = 23
    # variables        = 2
    chi-square         = 17.024
    reduced chi-square = 0.811
    Akaike info crit   = -2.921
    Bayesian info crit = -0.650
[[Variables]]
    xc:   0.87844247 +/- 1.139105 (129.67%) (init= 1.09081)
    yc:  -122.078095 +/- 11.38874 (9.33%) (init=-47.69958)
[[Correlations]] (unreported correlations are <  0.100)
outer : 0.878442476821 -122.078095702 170.417646989
#+end_example

#+BEGIN_SRC sh :results silent
open M17-*-arcfits.pdf
#+END_SRC

#+BEGIN_SRC sh :results file
python shape-conic-plot.py M17-MHD2040-AllB7 
#+END_SRC

#+RESULTS:
[[file:shape-conic-plot-M17-MHD2040-AllB7.pdf]]

#+BEGIN_SRC sh :results verbatim
  D=../read-shapes-LL
  python $D/find-xy-shell.py M17-HD2040 --pa0 0 --window 11
  python $D/fit-circle-shell.py M17-HD2040 --thmax 60 --savefig --figscale 250
#+END_SRC

#+RESULTS:
#+begin_example
[[Fit Statistics]]
    # function evals   = 15
    # data points      = 30
    # variables        = 2
    chi-square         = 11.414
    reduced chi-square = 0.408
    Akaike info crit   = -24.991
    Bayesian info crit = -22.188
[[Variables]]
    xc:   0.22707331 +/- 0.389464 (171.52%) (init= 0.2886785)
    yc:  -65.0888304 +/- 1.950807 (3.00%) (init=-84.06985)
[[Correlations]] (unreported correlations are <  0.100)
    C(xc, yc)                    =  0.160 
outer : 0.227073314289 -65.0888304071 149.803410692
#+end_example

#+BEGIN_SRC sh :results file
python shape-conic-plot.py M17-HD2040 
#+END_SRC

#+RESULTS:
[[file:shape-conic-plot-M17-HD2040.pdf]]



*** Reflect the one-sided arcs to make symmetrical
+ The dust emission images show only one side, but we need the make it symmetric so that ~find-xy-shell.py~ will work
+ Easiest to add an argument to [[file:~/Work/Bowshocks/Jorge/bowshock-shape/read-shapes-LL/find-xy-shell.py]]
  
#+BEGIN_SRC sh :results verbatim
  D=../read-shapes-LL
  for inc in i30 i60 i45; do
      python $D/find-xy-shell.py M17-MHD2040-AllB7-60mic-$inc --mirror --pa0 0 --window 11
      python $D/fit-circle-shell.py M17-MHD2040-AllB7-60mic-$inc --thmax 45 --savefig --figscale 60
  done
#+END_SRC

#+RESULTS:
#+begin_example
[[Fit Statistics]]
    # function evals   = 12
    # data points      = 16
    # variables        = 2
    chi-square         = 0.320
    reduced chi-square = 0.023
    Akaike info crit   = -58.588
    Bayesian info crit = -57.043
[[Variables]]
    xc:   1.7002e-07 +/- 0.157869 (92855293.03%) (init= 0.1209432)
    yc:  -20.3658004 +/- 1.409050 (6.92%) (init=-19.93934)
[[Correlations]] (unreported correlations are <  0.100)
outer : 1.70016462762e-07 -20.3658003969 40.4268868961
[[Fit Statistics]]
    # function evals   = 35
    # data points      = 20
    # variables        = 2
    chi-square         = 0.073
    reduced chi-square = 0.004
    Akaike info crit   = -108.311
    Bayesian info crit = -106.320
[[Variables]]
    xc:   5.3740e-05 +/- 0.046507 (86541.47%) (init= 0.2651148)
    yc:  -14.9839294 +/- 0.330729 (2.21%) (init=-27.47579)
[[Correlations]] (unreported correlations are <  0.100)
outer : 5.37402163237e-05 -14.9839294597 42.4449923846
[[Fit Statistics]]
    # function evals   = 17
    # data points      = 18
    # variables        = 2
    chi-square         = 0.261
    reduced chi-square = 0.016
    Akaike info crit   = -72.226
    Bayesian info crit = -70.445
[[Variables]]
    xc:   0.00014379 +/- 0.107214 (74561.91%) (init=-0.2295599)
    yc:  -15.6864090 +/- 0.824942 (5.26%) (init=-23.30099)
[[Correlations]] (unreported correlations are <  0.100)
outer : 0.000143793094275 -15.6864090423 39.0810382057
#+end_example

#+BEGIN_SRC sh :results verbatim
  D=../read-shapes-LL
  for inc in i30 i60 i45; do
      python $D/find-xy-shell.py M17-HD2040-60mic-$inc --mirror --pa0 0 --window 11
      python $D/fit-circle-shell.py M17-HD2040-60mic-$inc --thmax 45 --savefig --figscale 120
  done
#+END_SRC

#+RESULTS:
#+begin_example
[[Fit Statistics]]
    # function evals   = 22
    # data points      = 26
    # variables        = 2
    chi-square         = 7.130
    reduced chi-square = 0.297
    Akaike info crit   = -29.639
    Bayesian info crit = -27.123
[[Variables]]
    xc:   2.6445e-05 +/- 0.470628 (1779632.42%) (init= 0.1526615)
    yc:  -44.2965721 +/- 3.871329 (8.74%) (init=-48.36428)
[[Correlations]] (unreported correlations are <  0.100)
outer : 2.64452882579e-05 -44.2965721088 92.7918595185
[[Fit Statistics]]
    # function evals   = 15
    # data points      = 35
    # variables        = 2
    chi-square         = 6.252
    reduced chi-square = 0.189
    Akaike info crit   = -56.283
    Bayesian info crit = -53.172
[[Variables]]
    xc:   0.04032478 +/- 0.286020 (709.29%) (init=-1.559587)
    yc:  -45.4624617 +/- 2.046981 (4.50%) (init=-70.0189)
[[Correlations]] (unreported correlations are <  0.100)
    C(xc, yc)                    =  0.141 
outer : 0.0403247881747 -45.4624617231 115.235543069
[[Fit Statistics]]
    # function evals   = 15
    # data points      = 28
    # variables        = 2
    chi-square         = 4.024
    reduced chi-square = 0.155
    Akaike info crit   = -50.318
    Bayesian info crit = -47.653
[[Variables]]
    xc:  -0.00981840 +/- 0.387521 (3946.89%) (init= 6.938018)
    yc:  -48.6468558 +/- 2.543392 (5.23%) (init=-55.76348)
[[Correlations]] (unreported correlations are <  0.100)
    C(xc, yc)                    = -0.565 
outer : -0.00981840102467 -48.6468558088 104.627515957
#+end_example


** Fit arcs to Meyer 2016 shapes
#+BEGIN_SRC sh :results verbatim
  D=../read-shapes-LL
  python $D/find-xy-shell.py M16-MS2070n00p10-CD --pa0 0 --window 11
  python $D/fit-circle-shell.py M16-MS2070n00p10-CD --thmax 45 --savefig --figscale 400
#+END_SRC

#+RESULTS:
#+begin_example
[[Fit Statistics]]
    # function evals   = 15
    # data points      = 20
    # variables        = 2
    chi-square         = 2.710
    reduced chi-square = 0.151
    Akaike info crit   = -35.975
    Bayesian info crit = -33.983
[[Variables]]
    xc:   0.33132410 +/- 0.328603 (99.18%) (init= 0.3099345)
    yc:  -90.3086796 +/- 2.550881 (2.82%) (init=-129.4369)
[[Correlations]] (unreported correlations are <  0.100)
    C(xc, yc)                    =  0.109 
outer : 0.331324102216 -90.308679631 219.628145297
#+end_example


#+BEGIN_SRC sh :results silent
open M16-MS2070n00p10-*-arcfits.pdf
#+END_SRC

#+BEGIN_SRC sh :results verbatim
  D=../read-shapes-LL
  python $D/find-xy-shell.py M16-MS2070n00p10-BS --pa0 0 --window 10
  python $D/fit-circle-shell.py M16-MS2070n00p10-BS --thmax 45 --savefig --figscale 400
#+END_SRC

#+RESULTS:
#+begin_example
[[Fit Statistics]]
    # function evals   = 15
    # data points      = 23
    # variables        = 2
    chi-square         = 3.442
    reduced chi-square = 0.164
    Akaike info crit   = -39.685
    Bayesian info crit = -37.414
[[Variables]]
    xc:   0.97394196 +/- 0.352750 (36.22%) (init= 0.4950382)
    yc:  -129.062380 +/- 3.048129 (2.36%) (init=-149.6037)
[[Correlations]] (unreported correlations are <  0.100)
    C(xc, yc)                    =  0.100 
outer : 0.973941961957 -129.062380349 278.408680128
#+end_example


#+BEGIN_SRC sh :results file
python shape-conic-plot.py M16-MS2070n00p10
#+END_SRC

#+RESULTS:
[[file:shape-conic-plot-M16-MS2070n00p10.pdf]]



** New way of plotting bow shape
+ Plot 1/R against cos \theta
+ That should be a straight line for a confocal conic
+ If we take (1/R) - (1 + cos \theta)/2, then that is even better
  + Parabola is flat at 0, so we have compensated for the main slope
  + And we can see the variations more clearly
+ Big question is, what do we call this function?
  + *Compensated inversion* is a possibility
    + "/Inversion/" because 1/R is the circle inversion of the arc
    + "/Compensated/" because we subtract off a "typical" slope, as in a compensated power spectrum
  + *Departure function* is even better I think
    + It is the "/departure/" from a confocal parabola
    + less "clever"
    + We can call it \(\mathcal{D}\) or maybe \Delta
      \[ \Delta(\cos \theta) = \frac {R_{0}} {R(\theta)} - \frac12 (1 + \cos \theta)\]
#+BEGIN_SRC python :eval no :tangle shape-conic-plot.py
  import sys
  import json
  import numpy as np
  from astropy.coordinates import Longitude
  from matplotlib import pyplot as plt
  import seaborn as sns
  sys.path.append("../Dust-wave")
  import bow_projection as bp

  try:
      prefix = sys.argv[1]
  except:
      print(f"Usage: {sys.argv[0]} PREFIX")

  plotfile = sys.argv[0].replace('.py', f'-{prefix}.pdf')

  def compensate(R, theta):
      """Compensated inversion of R(theta)"""
      return 1.0/R - 0.5*(1 + np.cos(theta))

  def load_R_th(arc_prefix):
      jfile = f'{arc_prefix}-arcdata.json'
      data = json.load(open(jfile))
      R0 = np.array(data['outer']['R0'])
      R = np.array(data['outer']['R'])
      th = Longitude(data['outer']['theta'], unit='deg')
      th += Longitude(data['outer']['PA0'], unit='deg')
      return th.rad, R/R0


  sns.set_style('ticks')
  fig, ax = plt.subplots()

  # Plot confocal parabola
  ax.axhline(0.0, ls='-', c='k', lw=0.5)

  # Plot wilkinoid
  mugrid = np.linspace(-1.0, 1.0, 200)
  thgrid = np.arccos(mugrid)
  ax.plot(mugrid, compensate(bp.wilkinoid_R_theta(thgrid), thgrid),
          '-', c='k', lw=1.5)

  # Plot cantoids
  for beta in 0.3, 0.1, 0.03, 0.01, 0.003, 0.001, 0.0003, 0.0001:
      ax.plot(mugrid, compensate(bp.cantoid_R_theta(thgrid, beta), thgrid),
              '-', c='k', lw=0.5)

  # Fill in forbidden zone
  ax.fill_between(mugrid, -0.5*(1.0 + mugrid), -1.0, color='k', alpha=0.4)

  # Plot traced arcs
  try:
      th, R = load_R_th(prefix + '-CD')
      ax.plot(np.cos(th), compensate(R, th), '.', alpha=0.6, label='CD')
      th, R = load_R_th(prefix + '-BS')
      ax.plot(np.cos(th), compensate(R, th), '.', alpha=0.6, label='BS')
  except:
      th, R = load_R_th(prefix)
      ax.plot(np.cos(th), compensate(R, th), '.', alpha=0.6, label=prefix)



  ax.legend(title=prefix)

  ax.set(
      xlim=[-1.02, 1.02],
      ylim=[-0.155, 0.155],
      xlabel=r"$\cos \,\theta$",
      ylabel=r"$(R_{0} / R) - 0.5 (1 + \cos \,\theta) $",
  )
  sns.despine(trim=True)
  fig.tight_layout()
  fig.savefig(plotfile)
  print(plotfile, end='')
#+END_SRC

#+BEGIN_SRC sh :results file
python shape-conic-plot.py R97-Halpha-i00
#+END_SRC

#+RESULTS:
[[file:shape-conic-plot-R97-Halpha-i00.pdf]]

#+BEGIN_SRC sh :results file
python shape-conic-plot.py A16-Halpha-i00
#+END_SRC

#+RESULTS:
[[file:shape-conic-plot-A16-Halpha-i00.pdf]]

#+BEGIN_SRC sh :results file
python shape-conic-plot.py A16-20mic-i00
#+END_SRC

#+RESULTS:
[[file:shape-conic-plot-A16-20mic-i00.pdf]]

#+BEGIN_SRC sh :results file
python shape-conic-plot.py A16-12mic-i00
#+END_SRC

#+RESULTS:
[[file:shape-conic-plot-A16-12mic-i00.pdf]]

** Plot the planitude--alatude

*** Harvest the shape parameters from the JSON files
+ Do it like in [[id:A3F62646-04B8-448B-91FF-8E1DC04A9C41][The red supergiants and AGB stars]]

#+BEGIN_SRC sh :results verbatim
ls *.json |cut -d'-' -f1-3
#+END_SRC

#+RESULTS:
#+begin_example
A16-12mic-i00
A16-12mic-i30
A16-12mic-i60
A16-20mic-i00
A16-20mic-i30
A16-20mic-i60
A16-Halpha-i00
A16-Halpha-i30
A16-Halpha-i60
R97-Halpha-i00
#+end_example

#+name: harvest-radii-sims
#+BEGIN_SRC python :return table
  import json

  SOURCES = [
      "A16-12mic-i00", 
      "A16-12mic-i30", 
      "A16-12mic-i60", 
      "A16-20mic-i00", 
      "A16-20mic-i30", 
      "A16-20mic-i60", 
      "A16-Halpha-i00", 
      "A16-Halpha-i30", 
      "A16-Halpha-i60", 
      "R97-Halpha-i00", 
  ]

  radii_header = ['R0/100', 'Rc/R0', 'R90/R0', 'Rm90/R0']
  header = [['Source', *radii_header], None]
  INVALID = -999.00
  body = []
  for source in SOURCES:
      jfile = f'{source}-arcdata.json'
      data = json.load(open(jfile))
      assert source == data['star']['id']
      D = data['star']['D']
      row = [source]
      arc = 'outer'
      if arc in data:
          R0 = data[arc]['R0']
          Rc = data[arc]['Rc'] / R0
          if 'R90' in data[arc]:
              Rm90, R90 = data[arc]['R90']
              if Rm90 > 0.0:
                  Rm90 /= R0
              if R90 > 0.0:
                  R90 /= R0
          else:
              Rm90, R90 = INVALID, INVALID
          row += [f'{_:.2f}' for _ in [R0/100.0, Rc, Rm90, R90]]
      else:
          row += [f'{_:.2f}' for _ in [INVALID, INVALID, INVALID, INVALID]]
      body.append(row)

  #body.sort(key=lambda x: x[0])
  table = header + body

#+END_SRC

#+RESULTS: harvest-radii-sims
| Source         | R0/100 | Rc/R0 | R90/R0 | Rm90/R0 |
|----------------+--------+-------+--------+---------|
| A16-12mic-i00  |   0.44 |  2.59 |   1.69 |    1.69 |
| A16-12mic-i30  |   0.42 |  2.90 |   1.97 |    1.88 |
| A16-12mic-i60  |   0.54 |  1.90 |   1.45 |    1.42 |
| A16-20mic-i00  |   0.41 |  2.05 |   1.75 |    1.87 |
| A16-20mic-i30  |   0.40 |  2.41 |   1.96 |    1.97 |
| A16-20mic-i60  |   0.43 |  4.94 |   1.78 |    1.82 |
| A16-Halpha-i00 |   0.52 |  1.83 |   1.57 |    1.79 |
| A16-Halpha-i30 |   0.63 |  2.25 |   1.53 |    1.54 |
| A16-Halpha-i60 |   0.81 |  1.37 |   1.38 |    1.38 |
| R97-Halpha-i00 |   0.92 |  1.55 |   2.16 |    2.09 |

*** Make the plot
#+header: :var T=harvest-radii-sims :colnames no
#+BEGIN_SRC python :eval no :tangle sims-planitude-alatude.py
  import sys
  import numpy as np
  from scipy.interpolate import interp1d
  import statsmodels.api as sm
  from astropy.table import Table
  from matplotlib import pyplot as plt
  import matplotlib.ticker
  import seaborn as sns
  sys.path.append("../Dust-wave")
  import bow_projection as bp
  import bow_diagnostic


  plotfile = sys.argv[0].replace('.py', '.pdf')

  table = Table(rows=T[1:], names=T[0], dtype=[str] + [float]*4)

  # Take average +/- std of the +ve and -ve R90
  R90stack = np.stack([table['R90/R0'], table['Rm90/R0']])
  table['R90'] = np.nanmean(R90stack, axis=0)
  table['dR90'] = np.nanstd(R90stack, axis=0)
  table.remove_columns(['R90/R0', 'Rm90/R0'])

  sns.set_style('ticks')
  fig, ax = plt.subplots(figsize=(4, 4))

  Rc_grid = np.linspace(0.0, 10.0, 2000)
  R90_T0_grid = np.sqrt(2*Rc_grid)
  R90_T1_grid = np.sqrt(2*Rc_grid - 1.0)
  R90_T1_grid[~np.isfinite(R90_T1_grid)] = 0.0 

  ax.fill_between(Rc_grid, R90_T1_grid, R90_T0_grid, color='k', alpha=0.2)
  ax.fill_between(Rc_grid, R90_T0_grid, color='k', alpha=0.1)
  ax.plot(Rc_grid, R90_T0_grid, c='k', lw=0.5)
  ax.axhline(1.0, lw=0.5, alpha=0.5, color='k', zorder=-1)
  ax.axvline(1.0, lw=0.5, alpha=0.5, color='k', zorder=-1)
  ax.plot([0.0, 10.0], [0.0, 10.0], lw=0.5, alpha=0.5, color='k', zorder=-1)

  # Put a cross at the Wilkinoid coordinates: [5/3, sqrt(3)]
  ax.plot([5./3.], [np.sqrt(3.0)], '+', c='w', ms=10, alpha=1.0)
  # And plot the projected wilkinoids 
  bp.N_NEIGHBORHOOD = 50
  bp.DEGREE_POLY_NEIGHBORHOOD = 2
  bp.SCALE_NEIGHBORHOOD = 0.03
  bp.DEGREE_POLY_NEIGHBORHOOD_90 = 2
  bp.SCALE_NEIGHBORHOOD_90 = 0.01
  shape = bp.wilkinoid_R_theta
  th_inf = bp.theta_infinity(shape)
  inc = np.linspace(0.0, th_inf - np.pi/2, 50)
  tab = bow_diagnostic.parameter_table(inc, shape)
  Rc, R90 = tab['tilde R_c prime'], tab['tilde R_90 prime']
  ax.plot(Rc, R90, '-', c='w', label="_nolabel_", lw=0.6, alpha=0.9)
  sini = (0.5 + np.arange(20))/20
  inc_e = np.arcsin(sini)
  tab_e = bow_diagnostic.parameter_table(inc_e, shape)
  Rc_e, R90_e = tab_e['tilde R_c prime'], tab_e['tilde R_90 prime']
  ax.scatter(Rc_e, R90_e, marker='|', s=3**2,
             linewidths=0.1, edgecolors='none',
             c='w', alpha=0.5, label="_nolabel_")


  models = ["A16-12mic", "A16-20mic", "A16-Halpha", "R97-Halpha"]

  colors = sns.color_palette(n_colors=len(models))
  for model, color in zip(models, colors):
      mask = [s.startswith(model) for s in table['Source']]
      data = table[mask]
      ax.plot(data['Rc/R0'], data['R90'], '-', c=color, label=model, lw=1.5, alpha=0.9)
      # Put a dot at the i=0 case
      ax.plot(data['Rc/R0'][0:1], data['R90'][0:1], 'o', mec='none', c=color, label="_nolabel_", alpha=0.7)



  ax.legend(ncol=1, fontsize='small', title='Simulations',
            frameon=True, loc="lower right")
  ax.set(
      xlim=[0.0, 5.1],
      ylim=[0.0, 5.1],
      yticks=range(6),
  #    ylim=[-3.0, 1.1],
      xlabel=r"Projected planitude: $\Pi'$",
      ylabel=r"Projected alatude: $\Lambda'$",
  )        

  sns.despine()
  fig.tight_layout(pad=0.5)
  fig.savefig(plotfile)
  print(plotfile, end='')


#+END_SRC

#+BEGIN_SRC sh :results file
python sims-planitude-alatude.py
#+END_SRC

#+RESULTS:
[[file:sims-planitude-alatude.pdf]]
