* Projection of Quadrics
:PROPERTIES:
:ID:       B3ABBD4B-6A04-415F-8A8D-6A3179EB3686
:END:

+ Define a conic parameter: T_c = sgn(\theta_c) tan^2 \theta_c
  + Sphere: T_c = 1
  + Parabola: T_c = 0
  + Right hyperbola: T_c = -1
+ Relationship to characteristic radii:
  + T_c = 2 ~R_c - ~R_{90}^2
  + \(T_{c} = 2\, \widetilde{R}_{c} - \widetilde{R}_{90}{}^{2}\)
  + We could call this the *"conic discriminant"*
    + [2017-10-04 Wed] Or would it be better to call it the *quadric discriminant*
    + That way, we could use T_q instead of T_c, which would reduce the confusion between c for conic and c for curvature. 
  + Note that this is related to the "second discriminant" of conic
    sections
    + https://en.wikipedia.org/wiki/Discriminant#Conic_sections
    + That is, writing
      + \(A x^2 + B x y + C y^2 + D x + E y + F = 0\)
      + Discriminant is \(B^{2} - 4 A C\)
      + In our case \(B = 0\), \(A = 1 / a^2 \), and \( C = \pm 1 / b^2\), so the normal discriminant is \(\mp 4 / a^{2} b^{2}\)
      + So it is not exactly proportional to ours, which is \(\pm b^{2}/a^{2}\)
+ Projection with inclination:
  + \(\displaystyle T_{c}' = T_{c} \frac{1 + \tan^{2} i} {1 + T_{c} \tan^{2} i}\)
  + Sphere: T_c = 1 =>  T_c' = 1 for all i
  + Parabola: T_c = 0 => T_c' = 0 for all i
  + Prolate: 0 < T_c < 1 => T_c' > T_c for |i| > 0
    + => \(T_c \to 1\) as \(i \to \pi/2\)
  + Oblate: T_c > 1 => T_c' < T_c for |i| > 0
    + => also \(T_c \to 1\) as \(i \to \pi/2\)
  + Hyperbola: T_c < 0 => |T_c'| > |T_c| for |i| > 0
    + \(T_c' \to \infty\) as \(i \to \pi/2 - \theta_{c}\)
* New graphs for section 4.1
:PROPERTIES:
:ID:       2D6B6135-5090-4504-A31C-E1B9D717FAF0
:END:
** Split apart the current Fig 7
- Make separate graphs of the x and y axes as functions of inclination
*** The R_0/D graph
+ This shows little variation with T_c, but quite a lot of variation with R_c/R_0
+ We have \(f = \left(1 + T_{c} \tan^{2} i\right)^{1/2}\) and also define \(q \equiv R_{0} / D\)
  + Small angles: \( f - 1 \approx 0.5 \, T_{c}\, i^{2}\)
+ Then we get \(q' / q = 1 + \widetilde{R}_{c} (f - 1) / T_{c} \)
  + Note that that is the intrinsic \(\widetilde{R}_{c}\) there.
  + Small angles: \(q'/q \approx 1 + 0.5 \widetilde{R}_{c} \, i^{2}\)
+ *New* [2017-02-20 Mon] I now plot the actual value of R_0'/R_0, which has an extra factor of cos i
  + And I also plot the variation in D'/D seperately
#+BEGIN_SRC python :eval no :tangle projected-R0-vs-i.py
  import sys
  import numpy as np
  from matplotlib import pyplot as plt
  from matplotlib.ticker import FormatStrFormatter
  import seaborn as sns

  plotfile = sys.argv[0].replace('.py', '.pdf')

  sns.set_style('white')
  sns.set_color_codes(palette='deep')
  fig, ax = plt.subplots(figsize=(5, 5))

  inc = np.linspace(0.0, 0.5*np.pi, 5000)
  inc_deg = np.degrees(inc)

  Rcs = [0.5, 1.0, 2.0, 4.0, 8.0]
  thlabs = [44, 50, 42, 33, 22]
  Tcs = [-2.0, -1.0, -0.5, 1e-3, 0.5, 1.0, 2.0]
  shapes =  ['Hyperbola']*3 + ['Parabola', 'Prolate', 'Sphere', 'Oblate', ]

  n_Rc = len(Rcs)
  n_Tc = len(Tcs)

  lws = np.linspace(0.5, 2.0, n_Rc)
  alphas = np.linspace(1.0, 1.0, n_Rc)**1.5
  cols = sns.color_palette('magma', n_colors=n_Tc)
  cols = 'cgbkmry'
  lss = ['-.', '-', '--', ':', '-.']

  dash_solid = []
  dash_dashed = [3, 2]
  dash_dotted = [1, 2]
  dash_dot_dashed = [1, 2, 4, 2]
  dash_triple_dot_dashed = [1, 2, 1, 2, 1, 2, 4, 2]
  dashes = [dash_triple_dot_dashed, dash_solid,
            dash_dashed, dash_dotted, dash_dot_dashed]

  def qratio(inc, Tc, Rc):
      f = np.sqrt(1.0 + Tc*np.tan(inc)**2)
      return (1.0 + Rc*(f - 1.0) / Tc)*np.cos(inc)

  for Rc, lw, alpha, ls, dash, thlab in list(zip(Rcs, lws, alphas, lss, dashes, thlabs))[::-1]:
      for Tc, col, shape in list(zip(Tcs, cols, shapes))[::-1]:
          if Rc == 1.0:
              label = fr'{shape}: $T_c = {Tc:.1f}$'
          else:
              label = None
          ax.plot(inc_deg, qratio(inc, Tc, Rc),
                  c=col, lw=lw, alpha=alpha, label=label)
          # ax.plot(inc_deg, qratio(inc, Tc, Rc),
          #         c=col, dashes=dash, label=label)
      ax.text(thlab, qratio(np.radians(thlab), 0.5, Rc),
              r'$\widetilde{R}_{c}{} = ' + f'{Rc:.1f}$',
              ha='center', va='center', fontsize='x-small',
              bbox={'facecolor': 'white', 'alpha': 0.7, 'pad': 0.05, 'ec': 'none'})

  i25, i50, i75 = [90.0 - np.degrees(np.arccos(_)) for _ in [0.25, 0.5, 0.75]]

  ax.fill_betweenx([0.0, 100.0], [0.0]*2, [i25]*2, alpha=0.1, color='k')
  ax.fill_betweenx([0.0, 100.0], [i50]*2, [i75]*2, alpha=0.1, color='k')

  ax.plot(inc_deg, np.cos(inc), c='b')
  ax.annotate("Variation in projected\nseparation " + r"$D'/D$",
              xy=(50.0, np.cos(np.radians(50.0))), xycoords='data',
              xytext=(-20, -10), textcoords='offset points',
              ha='right', va='top',
              arrowprops=dict(arrowstyle="->", connectionstyle="arc3,rad=.2"),
              fontsize='small',)

  ax.legend(ncol=1, fontsize='small', frameon=True, title='Quadric Shape')
  ax.set(
      yscale='log',
      xlim=[0.0, 90.0],
      # ylim=[0.0, 5.5],
      ylim=[0.05, 50],
      xlabel=r'Inclination, degrees',
      ylabel=r"Variation in projected stand-off distance: $R_{0}' / R_{0}$",
      xticks=[15, 30, 45, 60, 75, 90],
  )
  ax.yaxis.set_major_formatter( FormatStrFormatter('%.1f') )

  sns.despine(trim=False)
  fig.tight_layout()
  fig.savefig(plotfile)
  print(plotfile, end='')
#+END_SRC

#+BEGIN_SRC sh :results file
python projected-R0-vs-i.py
#+END_SRC

#+RESULTS:
[[file:projected-R0-vs-i.pdf]]

*** The R_c/R_0 graph
+ \(\widetilde{R}_{c}' = \widetilde{R}_{c} ( 1 + \tan^{2} i) / f (1 + \widetilde{R}_{c} (f - 1) / T_{c})\)

#+BEGIN_SRC python :eval no :tangle projected-Rc-vs-i.py
  import sys
  import numpy as np
  from matplotlib import pyplot as plt
  from matplotlib.ticker import FixedLocator
  import seaborn as sns

  plotfile = sys.argv[0].replace('.py', '.pdf')

  sns.set_style('white')
  sns.set_color_codes(palette='deep')
  fig, ax = plt.subplots(figsize=(5, 5))

  inc = np.linspace(0.0, 0.5*np.pi, 500, endpoint=False)
  inc_deg = np.degrees(inc)

  Rcs = [0.5, 1.0, 2.0, 4.0, 8.0]
  Tcs = [-2.0, -1.0, -0.5, 1e-12, 0.5, 1.0, 2.0]
  shapes =  ['Hyperbola']*3 + ['Parabola', 'Prolate', 'Sphere', 'Oblate', ]

  n_Rc = len(Rcs)
  n_Tc = len(Tcs)

  lws = np.linspace(0.5, 2.0, n_Rc)
  alphas = np.linspace(1.0, 1.0, n_Rc)**1.5
  cols = sns.color_palette('magma', n_colors=n_Tc)
  cols = 'cgbkmry'
  lss = ['-.', '-', '--', ':', '-.']

  dash_solid = []
  dash_dashed = [3, 2]
  dash_dotted = [1, 2]
  dash_dot_dashed = [1, 2, 4, 2]
  dash_triple_dot_dashed = [1, 2, 1, 2, 1, 2, 4, 2]
  dashes = [dash_triple_dot_dashed, dash_solid,
            dash_dashed, dash_dotted, dash_dot_dashed]

  def Rc_dash(inc, Tc, Rc):
      f = np.sqrt(1.0 + Tc*np.tan(inc)**2)
      return Rc * (1 + np.tan(inc)**2) / f / (1.0 + Rc*(f - 1.0) / Tc)

  for Rc, lw, alpha, ls, dash in list(zip(Rcs, lws, alphas, lss, dashes))[::-1]:
      for Tc, col, shape in list(zip(Tcs, cols, shapes))[::-1]:
          if Rc == 1.0:
              label = fr'{shape}: $T_c = {Tc:.1f}$'
          else:
              label = None
          ax.plot(inc_deg, Rc_dash(inc, Tc, Rc),
                  c=col, lw=lw, alpha=alpha, label=label)

  i25, i50, i75 = [90.0 - np.degrees(np.arccos(_)) for _ in [0.25, 0.5, 0.75]]

  ax.fill_betweenx([0.0, 100.0], [0.0]*2, [i25]*2, alpha=0.1, color='k')
  ax.fill_betweenx([0.0, 100.0], [i50]*2, [i75]*2, alpha=0.1, color='k')
  ax.legend(ncol=1, fontsize='small', frameon=True, borderaxespad=0, title='Quadric Shape')
  ax.set(
      yscale='linear',
      xlim=[0.0, 90.0],
      ylim=[0.0, 10.0],
      # yticks=[1.0, 2.0, 5.0, 10.0],
      # yticklabels=['1', '2', '5', '10'],
      xlabel=r'Inclination, degrees',
      ylabel=r"Projected dimensionless radius of curvature: $\widetilde{R}_{c}{}'$",
      xticks=[15, 30, 45, 60, 75, 90],
  )        
  yaxis = ax.get_yaxis()

  # yaxis.set_major_locator(matplotlib.ticker.LogLocator(base=2.0))
  # yaxis.set_major_formatter(matplotlib.ticker.LogFormatter())

  yaxis.set_major_locator(FixedLocator([0.5, 1.0, 2.0, 4.0, 8.0]))
  sns.despine()

  fig.tight_layout()
  fig.savefig(plotfile)
  print(plotfile, end='')
#+END_SRC

#+BEGIN_SRC sh :results file
python projected-Rc-vs-i.py
#+END_SRC

#+RESULTS:
[[file:projected-Rc-vs-i.pdf]]



** The R_{90}/R_0 graph
+ [2017-09-12 Tue] See what this looks like and maybe include it in the paper for completeness

#+BEGIN_SRC python :eval no :tangle projected-R90-vs-i.py
  import sys
  import numpy as np
  from matplotlib import pyplot as plt
  from matplotlib.ticker import FixedLocator
  import seaborn as sns

  plotfile = sys.argv[0].replace('.py', '.pdf')

  sns.set_style('white')
  sns.set_color_codes(palette='deep')
  fig, ax = plt.subplots(figsize=(5, 5))

  inc = np.linspace(0.0, 0.5*np.pi, 500, endpoint=False)
  inc_deg = np.degrees(inc)

  Rcs = [0.5, 1.0, 2.0, 4.0, 8.0]
  Tcs = [-2.0, -1.0, -0.5, 1e-12, 0.5, 1.0, 2.0]
  shapes =  ['Hyperbola']*3 + ['Parabola', 'Prolate', 'Sphere', 'Oblate', ]

  n_Rc = len(Rcs)
  n_Tc = len(Tcs)

  lws = np.linspace(0.5, 2.0, n_Rc)
  alphas = np.linspace(1.0, 1.0, n_Rc)**1.5
  cols = sns.color_palette('magma', n_colors=n_Tc)
  cols = 'cgbkmry'
  lss = ['-.', '-', '--', ':', '-.']

  dash_solid = []
  dash_dashed = [3, 2]
  dash_dotted = [1, 2]
  dash_dot_dashed = [1, 2, 4, 2]
  dash_triple_dot_dashed = [1, 2, 1, 2, 1, 2, 4, 2]
  dashes = [dash_triple_dot_dashed, dash_solid,
            dash_dashed, dash_dotted, dash_dot_dashed]

  def Rc_prime(inc, Tc, Rc):
      f = np.sqrt(1.0 + Tc*np.tan(inc)**2)
      return Rc * (1 + np.tan(inc)**2) / f / (1.0 + Rc*(f - 1.0) / Tc)

  def Tc_prime(inc, Tc):
      fsquared = 1.0 + Tc*np.tan(inc)**2
      return Tc * (1.0 + np.tan(inc)**2) / fsquared

  def R90_prime(inc, Tc, Rc):
      return np.sqrt(2*Rc_prime(inc, Tc, Rc) - Tc_prime(inc, Tc))

  for Rc, lw, alpha, ls, dash in list(zip(Rcs, lws, alphas, lss, dashes))[::-1]:
      for Tc, col, shape in list(zip(Tcs, cols, shapes))[::-1]:
          if Rc == 1.0:
              label = fr'{shape}: $T_c = {Tc:.1f}$'
          else:
              label = None
          ax.plot(inc_deg, R90_prime(inc, Tc, Rc),
                  c=col, lw=lw, alpha=alpha, label=label)

  i25, i50, i75 = [90.0 - np.degrees(np.arccos(_)) for _ in [0.25, 0.5, 0.75]]

  ax.fill_betweenx([0.0, 100.0], [0.0]*2, [i25]*2, alpha=0.1, color='k')
  ax.fill_betweenx([0.0, 100.0], [i50]*2, [i75]*2, alpha=0.1, color='k')
  ax.legend(ncol=1, fontsize='small', frameon=True, borderaxespad=0, title='Quadric Shape')
  ax.set(
      yscale='linear',
      xlim=[0.0, 90.0],
      ylim=[0.0, 5.0],
      # yticks=[1.0, 2.0, 5.0, 10.0],
      # yticklabels=['1', '2', '5', '10'],
      xlabel=r'Inclination, degrees',
      ylabel=r"Projected dimensionless perpendicular radius: $\widetilde{R}_{90}{}'$",
      xticks=[15, 30, 45, 60, 75, 90],
  )        
  yaxis = ax.get_yaxis()

  # yaxis.set_major_locator(matplotlib.ticker.LogLocator(base=2.0))
  # yaxis.set_major_formatter(matplotlib.ticker.LogFormatter())

  yaxis.set_major_locator(FixedLocator([1.0, 2.0, 3.0, 4.0]))
  sns.despine()

  fig.tight_layout()
  fig.savefig(plotfile)
  print(plotfile, end='')
#+END_SRC

#+BEGIN_SRC sh :results file
python projected-R90-vs-i.py
#+END_SRC

#+RESULTS:
[[file:projected-R90-vs-i.pdf]]

** Projected T_c versus R_c
+ [ ] It is a bit of a problem that we are using "subscript c" to mean both "curvature" and "conic".  /Can we change one of them?/

#+BEGIN_SRC python :eval no :tangle projected-Tc-vs-Rc.py
  import sys
  import numpy as np
  from matplotlib import pyplot as plt
  import matplotlib.ticker
  import seaborn as sns

  plotfile = sys.argv[0].replace('.py', '.pdf')

  sns.set_style('white')
  fig, ax = plt.subplots(figsize=(5, 5))

  inc = np.linspace(0.0, 0.5*np.pi, 500, endpoint=False)
  inc_deg = np.degrees(inc)

  Rcs = [0.5, 1.0, 2.0, 4.0, 8.0]
  Tcs = [-2.0, -1.0, -0.5, 1e-8, 0.5, 1.0, 2.0]

  n_Rc = len(Rcs)
  n_Tc = len(Tcs)

  lws = np.linspace(1.0, 2.0, n_Rc)
  dash_solid = []
  dash_dashed = [3, 2]
  dash_dotted = [1, 2]
  dash_dot_dashed = [1, 2, 4, 2]
  dash_triple_dot_dashed = [1, 2, 1, 2, 1, 2, 4, 2]
  dashes = [dash_triple_dot_dashed, dash_solid,
            dash_dashed, dash_dotted, dash_dot_dashed]

  lss = ['-.', '-', '--', ':', '-.']
  alphas = np.linspace(1.0, 0.2, n_Rc)
  cols = sns.color_palette('magma', n_colors=n_Tc)


  def Rc_prime(inc, Tc, Rc):
      f = np.sqrt(1.0 + Tc*np.tan(inc)**2)
      return Rc * (1 + np.tan(inc)**2) / f / (1.0 + Rc*(f - 1.0) / Tc)

  def Tc_prime(inc, Tc):
      fsquared = 1.0 + Tc*np.tan(inc)**2
      return Tc * (1.0 + np.tan(inc)**2) / fsquared

  for Rc, lw, alpha, dash in list(zip(Rcs, lws, alphas, dashes))[::-1]:
      for Tc, col in list(zip(Tcs, cols))[::-1]:
          if Rc == 1.0:
              label = fr'$T_c = {Tc:.1f}$'
          else:
              label = None
          ax.plot(Rc_prime(inc, Tc, Rc), Tc_prime(inc, Tc),
                  c=col, dashes=dash, label=label)
          # ax.plot(Rc_dash(inc, Tc, Rc), Tc_dash(inc, Tc), '.', alpha=0.1, ms=4,
          #         c=col, label=label)
          ax.plot([Rc_prime(0, Tc, Rc)], [Tc_prime(0, Tc)], 'o', c=col)

  ax.legend(ncol=1, fontsize='xx-small', frameon=True)
  ax.set(
      yscale='linear',
      xlim=[0.0, 8.1],
      ylim=[-5.0, 2.1],
      xlabel=r"Projected dimensionless radius of curvature: $\widetilde{R}_{c}{}'$",
      ylabel=r"Projected conic discriminant: $T_c{}'$",
  )        

  fig.tight_layout()
  fig.savefig(plotfile)
  print(plotfile, end='')
#+END_SRC

#+BEGIN_SRC sh :results file
python projected-Tc-vs-Rc.py
#+END_SRC

#+RESULTS:
[[file:projected-Tc-vs-Rc.pdf]]

** Projected R90 versus Rc
:PROPERTIES:
:ID:       9232DE3C-903E-4D13-8E72-FC2B92D1FF95
:END:
#+BEGIN_SRC python :eval no :tangle projected-R90-vs-Rc.py
  import sys
  import numpy as np
  from matplotlib import pyplot as plt
  import matplotlib.ticker
  import seaborn as sns

  plotfile = sys.argv[0].replace('.py', '.pdf')

  sns.set_style('white')
  sns.set_color_codes(palette='deep')
  fig, ax = plt.subplots(figsize=(5, 5))

  Rc_grid = np.linspace(0.0, 10.0, 2000)
  R90_T0_grid = np.sqrt(2*Rc_grid)
  R90_T1_grid = np.sqrt(2*Rc_grid - 1.0)
  R90_T1_grid[~np.isfinite(R90_T1_grid)] = 0.0 


  ax.fill_between(Rc_grid, R90_T1_grid, R90_T0_grid, color='k', alpha=0.2)
  ax.fill_between(Rc_grid, R90_T0_grid, color='k', alpha=0.1)
  ax.plot(Rc_grid, R90_T0_grid, c='k', lw=0.5)
  ax.axhline(1.0, lw=0.5, alpha=0.5, color='k', zorder=-1)
  ax.axvline(1.0, lw=0.5, alpha=0.5, color='k', zorder=-1)
  ax.plot([0.0, 10.0], [0.0, 10.0], lw=0.5, alpha=0.5, color='k', zorder=-1)

  inc = np.linspace(0.0, 0.5*np.pi, 500, endpoint=False)
  inc_deg = np.degrees(inc)

  Rcs = [0.5, 1.0, 1.5, 2.0, 4.0, 8.0]
  Tcs = [-2.0, -1.0, -0.5, 1e-8, 0.5, 1.0, 2.0]
  shapes =  ['Hyperbola']*3 + ['Parabola', 'Prolate', 'Sphere', 'Oblate', ]

  n_Rc = len(Rcs)
  n_Tc = len(Tcs)

  lws = np.linspace(0.5, 2.0, n_Rc)
  alphas = np.linspace(1.0, 0.2, n_Rc)
  cols = sns.color_palette('magma', n_colors=n_Tc)
  cols = 'cgbkmry'


  def Rc_prime(inc, Tc, Rc):
      f = np.sqrt(1.0 + Tc*np.tan(inc)**2)
      return Rc * (1 + np.tan(inc)**2) / f / (1.0 + Rc*(f - 1.0) / Tc)

  def Tc_prime(inc, Tc):
      fsquared = 1.0 + Tc*np.tan(inc)**2
      return Tc * (1.0 + np.tan(inc)**2) / fsquared

  def R90_prime(inc, Tc, Rc):
      return np.sqrt(2*Rc_prime(inc, Tc, Rc) - Tc_prime(inc, Tc))


  for Rc, lw, alpha in list(zip(Rcs, lws, alphas))[::-1]:
      for Tc, col, shape in list(zip(Tcs, cols, shapes))[::-1]:
          if Rc == 1.0:
              label = fr'{shape}: $T_c = {Tc:.1f}$'
          else:
              label = None
          ax.plot(Rc_prime(inc, Tc, Rc), R90_prime(inc, Tc, Rc),
                  c=col, lw=lw, label=label)
          # ax.plot(Rc_dash(inc, Tc, Rc), Tc_dash(inc, Tc), '.', alpha=0.1, ms=4,
          #         c=col, label=label)
          ax.plot([Rc_prime(0, Tc, Rc)], [R90_prime(0, Tc, Rc)], '.', c=col, zorder=100)

  ax.legend(ncol=1, fontsize='small', frameon=True, loc='upper left', title='Quadric Shape')
  ax.set(
      yscale='linear',
      xlim=[0.0, 8.1],
      ylim=[0.0, 8.1],
      xlabel=r"Projected dimensionless radius of curvature: $\widetilde{R}_{c}{}'$",
      ylabel=r"Projected dimensionless perpendicular radius: $\widetilde{R}_{90}{}'$",
  )        
  sns.despine()
  fig.tight_layout()
  fig.savefig(plotfile)
  print(plotfile, end='')
#+END_SRC

#+BEGIN_SRC sh :results file
python projected-R90-vs-Rc.py
#+END_SRC

#+RESULTS:
[[file:projected-R90-vs-Rc.pdf]]



*** Animation of R_90 vs R_c graph (\Pi–\Lambda)
+ [2017-10-20 Fri] This is for my Puebla talk
+ Differences from previous
  1. Zooms in on range [1, 3]
  2. Uses matplotlib animation stuff
#+BEGIN_SRC python :eval no :tangle animation-R90-vs-Rc.py
  import sys
  import numpy as np
  from matplotlib import pyplot as plt
  import matplotlib.ticker
  from matplotlib import animation
  import seaborn as sns

  fileroot = sys.argv[0].replace('.py', '')

  sns.set_style('white')
  sns.set_color_codes(palette='deep')
  fig, ax = plt.subplots(figsize=(5, 5))

  #
  # Plot the background regions
  #
  Rc_grid = np.linspace(0.0, 10.0, 2000)
  R90_T0_grid = np.sqrt(2*Rc_grid)
  R90_T1_grid = np.sqrt(2*Rc_grid - 1.0)
  R90_T1_grid[~np.isfinite(R90_T1_grid)] = 0.0 
  ax.fill_between(Rc_grid, R90_T1_grid, R90_T0_grid, color='k', alpha=0.2)
  ax.fill_between(Rc_grid, R90_T0_grid, color='k', alpha=0.1)
  ax.plot(Rc_grid, R90_T0_grid, c='k', lw=0.5)
  ax.axhline(1.0, lw=0.5, alpha=0.5, color='k', zorder=-1)
  ax.axvline(1.0, lw=0.5, alpha=0.5, color='k', zorder=-1)
  ax.plot([0.0, 10.0], [0.0, 10.0], lw=0.5, alpha=0.5, color='k', zorder=-1)

  #
  # Plot lines for projected tracks versus inclination
  #
  inc = np.linspace(0.0, 0.5*np.pi, 500, endpoint=False)
  inc_deg = np.degrees(inc)

  Rcs = [0.5, 1.0, 1.5, 2.0, 3.0, 4.0]
  Tcs = [-2.0, -1.5, -1.0, -0.5, -0.25, 1e-8, 0.25, 0.5, 1.0, 1.5, 2.0]
  shapes =  ['Hyperbola']*5 + ['Parabola', 'Prolate', 'Prolate',
                               'Sphere', 'Oblate', 'Oblate', ]

  n_Rc = len(Rcs)
  n_Tc = len(Tcs)

  lws = np.linspace(0.5, 2.0, n_Rc)
  alphas = np.linspace(1.0, 0.2, n_Rc)
  cols = sns.color_palette('magma', n_colors=n_Tc)
  # cols = 'cgbkmry'


  def Rc_prime(inc, Tc, Rc):
      f = np.sqrt(1.0 + Tc*np.tan(inc)**2)
      return Rc * (1 + np.tan(inc)**2) / f / (1.0 + Rc*(f - 1.0) / Tc)

  def Tc_prime(inc, Tc):
      fsquared = 1.0 + Tc*np.tan(inc)**2
      return Tc * (1.0 + np.tan(inc)**2) / fsquared

  def R90_prime(inc, Tc, Rc):
      return np.sqrt(2*Rc_prime(inc, Tc, Rc) - Tc_prime(inc, Tc))


  dot_artists = {}
  for Rc, lw, alpha in list(zip(Rcs, lws, alphas))[::-1]:
      for Tc, col, shape in list(zip(Tcs, cols, shapes))[::-1]:
          if Rc == 1.0:
              label = fr'{shape}: $T_c = {Tc:.1f}$'
          else:
              label = None
          ax.plot(Rc_prime(inc, Tc, Rc), R90_prime(inc, Tc, Rc),
                  c=col, lw=lw, label=label)
          # Populate dict of artists that will be animated later
          dot_artists[(Rc, Tc)], = ax.plot([], [], '.', ms=10, c=col, zorder=100)

  ax.legend(ncol=2, fontsize='x-small', frameon=True, loc='upper left', title='Quadric Shape')
  ax.set(
      yscale='linear',
      xlim=[0.0, 4.1],
      ylim=[0.0, 4.1],
      xlabel=r"Projected planitude: $\Pi'$",
      ylabel=r"Projected alatude: $\Lambda'$",
  )        
  sns.despine()
  fig.tight_layout()

  #
  # Animation of the dots
  # 
  def animate_dots(inclination):
      """For each quadric, update (x, y) of dot for particular `inclination`"""
      for Rc, lw, alpha in list(zip(Rcs, lws, alphas))[::-1]:
          for Tc, col, shape in list(zip(Tcs, cols, shapes))[::-1]:
              x = Rc_prime(inclination, Tc, Rc)
              y = R90_prime(inclination, Tc, Rc)
              dot_artists[(Rc, Tc)].set_data([x], [y])
      return dot_artists.values()

  sini = np.linspace(0.0, 1.0, 100)
  incs4anim = np.arcsin(sini)
  anim = animation.FuncAnimation(fig, animate_dots, frames=incs4anim,
                                 repeat_delay=100, blit=True)
  moviefile = fileroot + '.mp4'
  anim.save(moviefile, writer='ffmpeg', fps=30, dpi=200)
  print(moviefile, end='')

#+END_SRC


#+BEGIN_SRC sh :results file
python animation-R90-vs-Rc.py
#+END_SRC

#+RESULTS:
[[file:animation-R90-vs-Rc.mp4]]


*** Show snapshots for different angles
:PROPERTIES:
:ID:       FA0B6F2B-DC73-4350-893D-A6710B41424E
:END:

#+BEGIN_SRC python :eval no :tangle projected-Tc-Rc-snapshots.py
  import sys
  import numpy as np
  from matplotlib import pyplot as plt
  import matplotlib.ticker
  import seaborn as sns

  plotfile = sys.argv[0].replace('.py', '.png')

  sns.set_style('white')
  fig, axes = plt.subplots(3, 3, figsize=(9, 9), sharex=True, sharey=True)

  incs_deg = 10.0*np.arange(9)

  ny, nx = 65, 73
  Rcs = np.linspace(0.5, 8.0, nx)
  Tcs = np.linspace(-3.0, 2.0, ny)[::-1]
  Rc_grid = Rcs[None, :]*np.ones_like(Tcs[:, None])
  Tc_grid = Tcs[:, None]*np.ones_like(Rcs[None, :])

  cols = sns.color_palette('magma', n_colors=ny)


  def Rc_prime(inc, Tc, Rc):
      f = np.sqrt(1.0 + Tc*np.tan(inc)**2)
      return Rc * (1 + np.tan(inc)**2) / f / (1.0 + Rc*(f - 1.0) / Tc)

  def Tc_prime(inc, Tc):
      fsquared = 1.0 + Tc*np.tan(inc)**2
      return Tc * (1.0 + np.tan(inc)**2) / fsquared

  for ax, inc_deg in zip(axes.flat, incs_deg):
      inc = np.radians(inc_deg)
      Rcp = Rc_prime(inc, Tc_grid, Rc_grid).ravel()
      Tcp = Tc_prime(inc, Tc_grid).ravel()
      ax.scatter(Rcp, Tcp, c=Tc_grid.ravel(),
		 vmin=Tc_grid.min(), vmax=Tc_grid.max(),
		 edgecolors='none',
		 cmap='magma', marker='.', s=15, alpha=0.8)
      ax.axhspan(0.0, 10.0, alpha=0.1, facecolor='k', zorder=-1)
      ax.axhline(1.0, ls='--', lw=0.5, c='k', zorder=0)
      ax.axvline(1.0, ls='--', lw=0.5, c='k', zorder=0)
      ax.plot([1.0], [1.0], 'x', c='k')
      ax.text(5.5, -4.0, rf'$i = {inc_deg:.0f}^\circ$',
              bbox={'facecolor': 'w', 'alpha': 0.8, 'edgecolor': 'none'})

  axes[-1, 0].set(
      yscale='linear',
      xlim=[0.0, 8.1],
      ylim=[-5.0, 2.1],
      xlabel=r"$\widetilde{R}_{c}{}'$",
      ylabel=r"$T_c{}'$",
  )        

  fig.tight_layout()
  fig.savefig(plotfile, dpi=300)
  print(plotfile, end='')

#+END_SRC

#+BEGIN_SRC sh :results file
python projected-Tc-Rc-snapshots.py
#+END_SRC

#+RESULTS:
[[file:projected-Tc-Rc-snapshots.png]]


Do the same but for R90 vs Rc

+ [2017-03-31 Fri] New experiment
  + [X] Indicate the increase in R_0'/R_0 by the size of the circles
  + [X] Remember to do the [[id:71BA6CCD-0AD0-46FA-AA2F-CCD6C3272A68][Copying figs to paper dir]]
  + This is for comparison with the OB bowshocks
  + This worked well, but the sizes really don't change an awful lot
    + It is a factor of 2 or 3 by i = 40, but mainly for the arcs in the hyperbola zone, but below the diagonal
      + And that is a zone that hardly has any sources in the observations

#+BEGIN_SRC python :eval no :tangle projected-R90-Rc-snapshots.py
  import sys
  import numpy as np
  from matplotlib import pyplot as plt
  import matplotlib.ticker
  import seaborn as sns

  plotfile = sys.argv[0].replace('.py', '.pdf')

  sns.set_style('white')
  fig, axes = plt.subplots(3, 3, figsize=(9, 9), sharex=True, sharey=True)

  incs_deg = 10.0*np.arange(9)

  ny, nx = 55, 55
  Rcs = np.linspace(0.5, 7.0, nx)
  R90s = np.linspace(0.5, 7.0, ny)[::-1]
  Rc_grid = Rcs[None, :]*np.ones_like(R90s[:, None])
  R90_grid = R90s[:, None]*np.ones_like(Rcs[None, :])
  Tc_grid = 2*Rc_grid - R90_grid**2

  cols = sns.color_palette('magma', n_colors=ny)


  def Rc_prime(inc, Tc, Rc):
      f = np.sqrt(1.0 + Tc*np.tan(inc)**2)
      return Rc * (1 + np.tan(inc)**2) / f / (1.0 + Rc*(f - 1.0) / Tc)

  def Tc_prime(inc, Tc):
      fsquared = 1.0 + Tc*np.tan(inc)**2
      return Tc * (1.0 + np.tan(inc)**2) / fsquared

  def R90_prime(inc, Tc, Rc):
      return np.sqrt(2*Rc_prime(inc, Tc, Rc) - Tc_prime(inc, Tc))

  def qratio(inc, Tc, Rc):
      f = np.sqrt(1.0 + Tc*np.tan(inc)**2)
      return (1.0 + Rc*(f - 1.0) / Tc)*np.cos(inc)


  for ax, inc_deg in zip(axes.flat, incs_deg):

      Rc_grid2 = np.linspace(0.0, 10.0, 2000)
      R90_T0_grid = np.sqrt(2*Rc_grid2)
      R90_T1_grid = np.sqrt(2*Rc_grid2 - 1.0)
      R90_T1_grid[~np.isfinite(R90_T1_grid)] = 0.0 
      ax.fill_between(Rc_grid2, R90_T1_grid, R90_T0_grid, color='k', alpha=0.2)
      ax.fill_between(Rc_grid2, R90_T0_grid, color='k', alpha=0.1)
      ax.plot(Rc_grid2, R90_T0_grid, c='k', lw=0.5)
      ax.axhline(1.0, lw=0.5, alpha=0.5, color='k', zorder=-1)
      ax.axvline(1.0, lw=0.5, alpha=0.5, color='k', zorder=-1)
      ax.plot([0.0, 10.0], [0.0, 10.0], lw=0.5, alpha=0.5, color='k', zorder=-1)

      inc = np.radians(inc_deg)
      Rcp = Rc_prime(inc, Tc_grid, Rc_grid).ravel()
      R90p = R90_prime(inc, Tc_grid, Rc_grid).ravel()
      R0p = qratio(inc, Tc_grid, Rc_grid).ravel()
    
      ax.scatter(Rcp, R90p, c=Tc_grid.ravel(), s=15*R0p,
		 vmin=Tc_grid.min(), vmax=Tc_grid.max(),
		 edgecolors='none',
		 cmap='magma', marker='.', alpha=0.8)
      # ax.axhspan(0.0, 10.0, alpha=0.1, facecolor='k', zorder=-1)
      # ax.axhline(1.0, ls='--', lw=0.5, c='k', zorder=0)
      # ax.axvline(1.0, ls='--', lw=0.5, c='k', zorder=0)
      ax.plot([1.0], [1.0], 'x', c='k')
      ax.text(5.5, 0.5, rf'$i = {inc_deg:.0f}^\circ$',
              bbox={'facecolor': 'w', 'alpha': 0.8, 'edgecolor': 'none'})

  axes[-1, 0].set(
      yscale='linear',
      xlim=[0.0, 8.1],
      ylim=[0.0, 8.1],
      xlabel=r"$\widetilde{R}_{c}{}'$",
      ylabel=r"$\widetilde{R}_{90}{}'$",
  )        

  fig.tight_layout()
  fig.savefig(plotfile, dpi=300)
  print(plotfile, end='')

#+END_SRC

#+BEGIN_SRC sh :results file
python projected-R90-Rc-snapshots.py
#+END_SRC

#+RESULTS:
[[file:projected-R90-Rc-snapshots.pdf]]



** DONE \theta_90 versus inclination
CLOSED: [2017-02-22 Wed 11:50]


#+BEGIN_SRC python :eval no :tangle projected-th90-vs-i.py
  import sys
  import numpy as np
  from matplotlib import pyplot as plt
  import matplotlib.ticker
  import seaborn as sns

  plotfile = sys.argv[0].replace('.py', '.pdf')

  sns.set_style('white')
  sns.set_color_codes(palette='deep')
  fig, ax = plt.subplots(figsize=(5, 5))

  inc = np.linspace(0.0, 0.5*np.pi, 500)
  inc_deg = np.degrees(inc)

  Rcs = [0.5, 1.0, 2.0, 4.0, 8.0]
  Tcs = [-2.0, -1.0, -0.5, 1e-12, 0.5, 1.0, 2.0]
  shapes =  ['Hyperbola']*3 + ['Parabola', 'Prolate', 'Sphere', 'Oblate', ]

  n_Rc = len(Rcs)
  n_Tc = len(Tcs)

  lws = np.linspace(0.5, 2.0, n_Rc)
  alphas = np.linspace(1.0, 1.0, n_Rc) * 0.9
  cols = sns.color_palette('magma', n_colors=n_Tc)
  cols = 'cgbkmry'
  lss = ['-.', '-', '--', ':', '-.']

  dash_solid = []
  dash_dashed = [3, 2]
  dash_dotted = [1, 2]
  dash_dot_dashed = [1, 2, 4, 2]
  dash_triple_dot_dashed = [1, 2, 1, 2, 1, 2, 4, 2]
  dashes = [dash_triple_dot_dashed, dash_solid,
            dash_dashed, dash_dotted, dash_dot_dashed]

  def Rc_prime(inc, Tc, Rc):
      f = np.sqrt(1.0 + Tc*np.tan(inc)**2)
      return Rc * (1 + np.tan(inc)**2) / f / (1.0 + Rc*(f - 1.0) / Tc)

  def Tc_prime(inc, Tc):
      fsquared = 1.0 + Tc*np.tan(inc)**2
      return Tc * (1.0 + np.tan(inc)**2) / fsquared

  def Rc_dash(inc, Tc, Rc):
      f = np.sqrt(1.0 + Tc*np.tan(inc)**2)
      return Rc * (1 + np.tan(inc)**2) / f / (1.0 + Rc*(f - 1.0) / Tc)

  def th90(inc, Tc, Rc):
      t2i = np.tan(inc)**2
      tan_th90 = -np.sqrt(t2i*(2.0 + Tc*t2i) + (2.0 - Tc/Rc)/Rc)/t2i
      return 180.0 + np.degrees(np.arctan(tan_th90))

  def R90_prime(inc, Tc, Rc):
      return np.sqrt(2*Rc_prime(inc, Tc, Rc) - Tc_prime(inc, Tc))

  for Rc, lw, alpha, ls, dash in list(zip(Rcs, lws, alphas, lss, dashes))[::-1]:
      for Tc, col, shape in list(zip(Tcs, cols, shapes))[::-1]:
          if Rc == 0.5:
              label = fr'{shape}: $T_c = {Tc:.1f}$'
          else:
              label = None
          R90 = R90_prime(inc, Tc, Rc)
          m = np.isfinite(R90) & (R90 > 0.0)
          ax.plot(inc_deg[m], th90(inc[m], Tc, Rc),
                  lw=lw, c=col, alpha=alpha, label=label)

  i25, i50, i75 = [90.0 - np.degrees(np.arccos(_)) for _ in [0.25, 0.5, 0.75]]

  ax.fill_betweenx([0.0, 200.0], [0.0]*2, [i25]*2, alpha=0.1, color='k')
  ax.fill_betweenx([0.0, 200.0], [i50]*2, [i75]*2, alpha=0.1, color='k')
  ax.legend(ncol=1, fontsize='small', frameon=True, title='Quadric Shape')
  ax.set(
      yscale='linear',
      xlim=[0.0, 90.0],
      ylim=[80.0, 180.0],
      # yticks=[1.0, 2.0, 5.0, 10.0],
      # yticklabels=['1', '2', '5', '10'],
      xlabel=r'Inclination, degrees',
      ylabel=r"Body-frame polar angle of perpendicular projected axis: $\theta_{90}$, degrees",
      xticks=[15, 30, 45, 60, 75, 90],
  )        
  yaxis = ax.get_yaxis()

  sns.despine()
  fig.tight_layout()
  fig.savefig(plotfile)
  print(plotfile, end='')
#+END_SRC

#+BEGIN_SRC sh :results file
python projected-th90-vs-i.py
#+END_SRC

#+RESULTS:
[[file:projected-th90-vs-i.pdf]]


* Copying figs to paper dir
:PROPERTIES:
:ID:       71BA6CCD-0AD0-46FA-AA2F-CCD6C3272A68
:END:
#+BEGIN_SRC sh :results verbatim
date
cp -v projected-*.pdf dust-*.pdf ../papers/Paper1/figs
#+END_SRC

#+RESULTS:
#+begin_example
Fri Sep 29 10:09:59 CDT 2017
projected-R0-vs-i.pdf -> ../papers/Paper1/figs/projected-R0-vs-i.pdf
projected-R90-Rc-snapshots.pdf -> ../papers/Paper1/figs/projected-R90-Rc-snapshots.pdf
projected-R90-vs-Rc.pdf -> ../papers/Paper1/figs/projected-R90-vs-Rc.pdf
projected-R90-vs-i.pdf -> ../papers/Paper1/figs/projected-R90-vs-i.pdf
projected-Rc-vs-i.pdf -> ../papers/Paper1/figs/projected-Rc-vs-i.pdf
projected-Tc-Rc-snapshots.pdf -> ../papers/Paper1/figs/projected-Tc-Rc-snapshots.pdf
projected-Tc-vs-Rc.pdf -> ../papers/Paper1/figs/projected-Tc-vs-Rc.pdf
projected-th90-vs-i.pdf -> ../papers/Paper1/figs/projected-th90-vs-i.pdf
dust-trajectories.pdf -> ../papers/Paper1/figs/dust-trajectories.pdf
#+end_example






* Dust grain trajectories in a central force
:PROPERTIES:
:ID:       8EC004CA-32CC-4B41-830C-535FF79B0544
:END:
#+BEGIN_SRC python :tangle dust-trajectories.py
  import sys
  import numpy as np
  from matplotlib import pyplot as plt
  import seaborn as sns

  figfile = sys.argv[0].replace('.py', '.pdf')
  NTH = 4001
  sns.set_style('white')
  sns.set_color_codes('dark')
  fig, ax = plt.subplots(figsize=(5, 5))
  blist = np.linspace(0.0, 6.0) + 0.01
  thmlist = np.arccos(1./np.sqrt(1.0 + 4.0*blist**2))
  for thm in thmlist:
      epsilon = 1./np.cos(thm)
      theta = np.linspace(0.001, min(np.pi, 2*thm - 0.001), NTH)
      im = np.argmin(np.abs(theta - thm))
      r = 0.5*(epsilon**2 - 1)/(epsilon*np.cos(theta - thm) - 1.0)
      x = r*np.cos(theta)
      y = r*np.sin(theta)
      m_in = (theta <= thm) & (y >= 0.0)
      m_out = (theta > thm) & (y >= 0.0)
      ax.plot([r[im]*np.cos(theta[im])], [r[im]*np.sin(theta[im])],
              's', ms=0.6, color='k')
      ax.plot(x[m_in], y[m_in], '-', color='gray', alpha=0.8, lw=0.5)
      ax.plot(x[m_out], y[m_out], '-', color='r', alpha=0.8, lw=0.5)
  thm_grid = np.linspace(0.0, np.pi, 200)
  rm = 2.0/(1.0 + np.cos(thm_grid))
  xlocus = rm*np.cos(thm_grid)
  ylocus = rm*np.sin(thm_grid)
  ax.plot(xlocus, ylocus, '-', color='k', alpha=0.2, lw=3)

  ax.plot([0.0], [0.0], '*', color='r')
  ax.set(xlim=[-3, 3], ylim=[-0.1, 5.9],
         xlabel="$x / R_0$",
         ylabel="$y / R_0$")
  sns.despine()
  fig.tight_layout()
  fig.savefig(figfile)
  print(figfile, end='')
#+END_SRC


#+BEGIN_SRC shell :results file
python dust-trajectories.py
#+END_SRC

#+RESULTS:
[[file:dust-trajectories.pdf]]

* Measurements of the observed LL arcs

** List of promising objects
+ NW group
  + 073-227
  + 109-246
+ SW group
  + 000-400
  + 005-514
  + 012-407
  + 030-524 (asymmetric)
  + 042-628
  + LL1
  + 065-502 (weak)
  + 069-601
+ W group
  + 4285-458
  + LL3
  + LL2 (uncertain which arc to use)
  + LL4
  + 4468-605 (asymmetric)
+ S group
  + 116-3101
  + 266-558
  + 308-3036
  + LL6
  + LL7 (requires wider field to measure R90')
** Methodology
+ Programs are in [[file:~/Work/Bowshocks/Jorge/bowshock-shape/read-shapes-LL/]]
*** TODO Determining Rc
+ fit-circle-shell.py does the fitting
+ [ ] We need to change the mask on theta in the routine =update_arc_data= so that it only uses theta < 45 deg
  + This should be fine for arcs with Rc/R0 < 3 or so
  + But for broader arcs, there may be insufficient points within \pm45\deg
+ [ ] How should we estimate the errors?
  + We could use the point removal method that we used with the proplyds

*** TODO Determining R90
+ We can plot R(\theta) and just interpolate to \theta = 90\deg
+ 

** Where data files are
+ Original measured shapes are in
  + =~/Dropbox/LuisBowshocks/j8oc*_wcs/*-arcdata.json=
+ Now copied to [[file:~/Work/Bowshocks/Jorge/bowshock-shape/LL-shapes-2017/]]

*** Copy data files to this project

#+BEGIN_SRC sh :results verbatim
date
cp -av ~/Dropbox/LuisBowshocks/j8oc*_wcs/*-arcdata.json ../LL-shapes-2017
#+END_SRC

#+RESULTS:
#+begin_example
Wed Feb 22 13:31:06 CST 2017
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/065-502-arcdata.json -> ../LL-shapes-2017/065-502-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/074-229-arcdata.json -> ../LL-shapes-2017/074-229-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/083-435-arcdata.json -> ../LL-shapes-2017/083-435-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/101-233-arcdata.json -> ../LL-shapes-2017/101-233-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/102-157-arcdata.json -> ../LL-shapes-2017/102-157-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/106-245-arcdata.json -> ../LL-shapes-2017/106-245-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/109-246-arcdata.json -> ../LL-shapes-2017/109-246-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/117-421-arcdata.json -> ../LL-shapes-2017/117-421-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/121-434-arcdata.json -> ../LL-shapes-2017/121-434-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/142-301-arcdata.json -> ../LL-shapes-2017/142-301-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/154-225-arcdata.json -> ../LL-shapes-2017/154-225-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/154-240-arcdata.json -> ../LL-shapes-2017/154-240-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/158-323-arcdata.json -> ../LL-shapes-2017/158-323-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/159-221-arcdata.json -> ../LL-shapes-2017/159-221-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/161-324-arcdata.json -> ../LL-shapes-2017/161-324-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/163-222-arcdata.json -> ../LL-shapes-2017/163-222-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/163-317-arcdata.json -> ../LL-shapes-2017/163-317-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/165-235-arcdata.json -> ../LL-shapes-2017/165-235-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/166-316-arcdata.json -> ../LL-shapes-2017/166-316-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/167-317-arcdata.json -> ../LL-shapes-2017/167-317-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/168-326-arcdata.json -> ../LL-shapes-2017/168-326-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/168-326N-arcdata.json -> ../LL-shapes-2017/168-326N-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/168-328-arcdata.json -> ../LL-shapes-2017/168-328-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/169-338-arcdata.json -> ../LL-shapes-2017/169-338-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/170-249-arcdata.json -> ../LL-shapes-2017/170-249-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/173-236-arcdata.json -> ../LL-shapes-2017/173-236-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/173-342-arcdata.json -> ../LL-shapes-2017/173-342-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/175-321-arcdata.json -> ../LL-shapes-2017/175-321-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/177-341-arcdata.json -> ../LL-shapes-2017/177-341-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/178-258-arcdata.json -> ../LL-shapes-2017/178-258-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/180-331-arcdata.json -> ../LL-shapes-2017/180-331-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/189-329-arcdata.json -> ../LL-shapes-2017/189-329-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/LL1-arcdata.json -> ../LL-shapes-2017/LL1-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/w005-514-arcdata.json -> ../LL-shapes-2017/w005-514-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/w012-407-arcdata.json -> ../LL-shapes-2017/w012-407-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/w014-414-arcdata.json -> ../LL-shapes-2017/w014-414-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/w030-524-arcdata.json -> ../LL-shapes-2017/w030-524-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/w044-527-arcdata.json -> ../LL-shapes-2017/w044-527-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/w069-601-arcdata.json -> ../LL-shapes-2017/w069-601-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/w073-227-arcdata.json -> ../LL-shapes-2017/w073-227-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc02010_wcs/131-046-arcdata.json -> ../LL-shapes-2017/131-046-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc02010_wcs/132-053-arcdata.json -> ../LL-shapes-2017/132-053-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc02010_wcs/206-043-arcdata.json -> ../LL-shapes-2017/206-043-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc06010_wcs/204-330-arcdata.json -> ../LL-shapes-2017/204-330-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc06010_wcs/212-400-arcdata.json -> ../LL-shapes-2017/212-400-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc06010_wcs/w266-558-arcdata.json -> ../LL-shapes-2017/w266-558-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc07010_wcs/261-3018-arcdata.json -> ../LL-shapes-2017/261-3018-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc07010_wcs/305-811-arcdata.json -> ../LL-shapes-2017/305-811-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc07010_wcs/LL5-arcdata.json -> ../LL-shapes-2017/LL5-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc08010_wcs/308-3036-arcdata.json -> ../LL-shapes-2017/308-3036-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc08010_wcs/344-3020-arcdata.json -> ../LL-shapes-2017/344-3020-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc08010_wcs/362-3137-arcdata.json -> ../LL-shapes-2017/362-3137-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc08010_wcs/LL6-arcdata.json -> ../LL-shapes-2017/LL6-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc09010_wcs/049-143-arcdata.json -> ../LL-shapes-2017/049-143-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc09010_wcs/051-024-arcdata.json -> ../LL-shapes-2017/051-024-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc09010_wcs/072-134-arcdata.json -> ../LL-shapes-2017/072-134-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc09010_wcs/4578-251-arcdata.json -> ../LL-shapes-2017/4578-251-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc09010_wcs/w000-400-arcdata.json -> ../LL-shapes-2017/w000-400-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc14010_wcs/066-3251-arcdata.json -> ../LL-shapes-2017/066-3251-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc14010_wcs/116-3101-arcdata.json -> ../LL-shapes-2017/116-3101-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc14010_wcs/119-3155-arcdata.json -> ../LL-shapes-2017/119-3155-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc14010_wcs/136-3057-arcdata.json -> ../LL-shapes-2017/136-3057-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc14010_wcs/138-3024-arcdata.json -> ../LL-shapes-2017/138-3024-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc14010_wcs/203-3039-arcdata.json -> ../LL-shapes-2017/203-3039-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc16010_wcs/022-635-arcdata.json -> ../LL-shapes-2017/022-635-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc16010_wcs/041-637-arcdata.json -> ../LL-shapes-2017/041-637-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc16010_wcs/042-628-arcdata.json -> ../LL-shapes-2017/042-628-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc16010_wcs/4582-635-arcdata.json -> ../LL-shapes-2017/4582-635-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc16010_wcs/w005-514-arcdata.json -> ../LL-shapes-2017/w005-514-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc17010_wcs/4468-605-arcdata.json -> ../LL-shapes-2017/4468-605-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc17010_wcs/LL3-arcdata.json -> ../LL-shapes-2017/LL3-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc18010_wcs/LL2-arcdata.json -> ../LL-shapes-2017/LL2-arcdata.json
/Users/will/Dropbox/LuisBowshocks/j8oc24010_wcs/LL4-arcdata.json -> ../LL-shapes-2017/LL4-arcdata.json
#+end_example

*** Copy FITS images

#+BEGIN_SRC sh :results verbatim
date
cp -av ~/Dropbox/LuisBowshocks/j8oc*_wcs/*-Bally_??-extract.fits ../LL-shapes-2017
#+END_SRC

#+RESULTS:
#+begin_example
Wed Feb 22 21:58:19 CST 2017
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/065-502-Bally_01-extract.fits -> ../LL-shapes-2017/065-502-Bally_01-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/074-229-Bally_01-extract.fits -> ../LL-shapes-2017/074-229-Bally_01-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/083-435-Bally_01-extract.fits -> ../LL-shapes-2017/083-435-Bally_01-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/101-233-Bally_01-extract.fits -> ../LL-shapes-2017/101-233-Bally_01-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/102-157-Bally_01-extract.fits -> ../LL-shapes-2017/102-157-Bally_01-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/106-245-Bally_01-extract.fits -> ../LL-shapes-2017/106-245-Bally_01-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/109-246-Bally_01-extract.fits -> ../LL-shapes-2017/109-246-Bally_01-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/117-421-Bally_01-extract.fits -> ../LL-shapes-2017/117-421-Bally_01-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/121-434-Bally_01-extract.fits -> ../LL-shapes-2017/121-434-Bally_01-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/142-301-Bally_01-extract.fits -> ../LL-shapes-2017/142-301-Bally_01-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/154-225-Bally_01-extract.fits -> ../LL-shapes-2017/154-225-Bally_01-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/154-240-Bally_01-extract.fits -> ../LL-shapes-2017/154-240-Bally_01-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/158-323-Bally_01-extract.fits -> ../LL-shapes-2017/158-323-Bally_01-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/159-221-Bally_01-extract.fits -> ../LL-shapes-2017/159-221-Bally_01-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/161-324-Bally_01-extract.fits -> ../LL-shapes-2017/161-324-Bally_01-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/163-222-Bally_01-extract.fits -> ../LL-shapes-2017/163-222-Bally_01-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/163-317-Bally_01-extract.fits -> ../LL-shapes-2017/163-317-Bally_01-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/165-235-Bally_01-extract.fits -> ../LL-shapes-2017/165-235-Bally_01-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/166-316-Bally_01-extract.fits -> ../LL-shapes-2017/166-316-Bally_01-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/167-317-Bally_01-extract.fits -> ../LL-shapes-2017/167-317-Bally_01-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/168-326-Bally_01-extract.fits -> ../LL-shapes-2017/168-326-Bally_01-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/168-326N-Bally_01-extract.fits -> ../LL-shapes-2017/168-326N-Bally_01-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/168-328-Bally_01-extract.fits -> ../LL-shapes-2017/168-328-Bally_01-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/169-338-Bally_01-extract.fits -> ../LL-shapes-2017/169-338-Bally_01-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/170-249-Bally_01-extract.fits -> ../LL-shapes-2017/170-249-Bally_01-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/173-236-Bally_01-extract.fits -> ../LL-shapes-2017/173-236-Bally_01-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/173-342-Bally_01-extract.fits -> ../LL-shapes-2017/173-342-Bally_01-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/175-321-Bally_01-extract.fits -> ../LL-shapes-2017/175-321-Bally_01-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/177-341-Bally_01-extract.fits -> ../LL-shapes-2017/177-341-Bally_01-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/178-258-Bally_01-extract.fits -> ../LL-shapes-2017/178-258-Bally_01-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/180-331-Bally_01-extract.fits -> ../LL-shapes-2017/180-331-Bally_01-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/189-329-Bally_01-extract.fits -> ../LL-shapes-2017/189-329-Bally_01-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/LL1-Bally_01-extract.fits -> ../LL-shapes-2017/LL1-Bally_01-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/w005-514-Bally_01-extract.fits -> ../LL-shapes-2017/w005-514-Bally_01-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/w012-407-Bally_01-extract.fits -> ../LL-shapes-2017/w012-407-Bally_01-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/w014-414-Bally_01-extract.fits -> ../LL-shapes-2017/w014-414-Bally_01-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/w030-524-Bally_01-extract.fits -> ../LL-shapes-2017/w030-524-Bally_01-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/w044-527-Bally_01-extract.fits -> ../LL-shapes-2017/w044-527-Bally_01-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/w069-601-Bally_01-extract.fits -> ../LL-shapes-2017/w069-601-Bally_01-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/w073-227-Bally_01-extract.fits -> ../LL-shapes-2017/w073-227-Bally_01-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc02010_wcs/131-046-Bally_02-extract.fits -> ../LL-shapes-2017/131-046-Bally_02-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc02010_wcs/132-053-Bally_02-extract.fits -> ../LL-shapes-2017/132-053-Bally_02-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc02010_wcs/206-043-Bally_02-extract.fits -> ../LL-shapes-2017/206-043-Bally_02-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc06010_wcs/204-330-Bally_06-extract.fits -> ../LL-shapes-2017/204-330-Bally_06-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc06010_wcs/212-400-Bally_06-extract.fits -> ../LL-shapes-2017/212-400-Bally_06-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc06010_wcs/w266-558-Bally_06-extract.fits -> ../LL-shapes-2017/w266-558-Bally_06-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc07010_wcs/261-3018-Bally_07-extract.fits -> ../LL-shapes-2017/261-3018-Bally_07-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc07010_wcs/305-811-Bally_07-extract.fits -> ../LL-shapes-2017/305-811-Bally_07-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc07010_wcs/LL5-Bally_07-extract.fits -> ../LL-shapes-2017/LL5-Bally_07-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc08010_wcs/308-3036-Bally_08-extract.fits -> ../LL-shapes-2017/308-3036-Bally_08-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc08010_wcs/344-3020-Bally_08-extract.fits -> ../LL-shapes-2017/344-3020-Bally_08-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc08010_wcs/362-3137-Bally_08-extract.fits -> ../LL-shapes-2017/362-3137-Bally_08-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc08010_wcs/LL6-Bally_08-extract.fits -> ../LL-shapes-2017/LL6-Bally_08-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc09010_wcs/049-143-Bally_09-extract.fits -> ../LL-shapes-2017/049-143-Bally_09-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc09010_wcs/051-024-Bally_09-extract.fits -> ../LL-shapes-2017/051-024-Bally_09-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc09010_wcs/072-134-Bally_09-extract.fits -> ../LL-shapes-2017/072-134-Bally_09-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc09010_wcs/4578-251-Bally_09-extract.fits -> ../LL-shapes-2017/4578-251-Bally_09-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc09010_wcs/w000-400-Bally_09-extract.fits -> ../LL-shapes-2017/w000-400-Bally_09-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc14010_wcs/066-3251-Bally_14-extract.fits -> ../LL-shapes-2017/066-3251-Bally_14-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc14010_wcs/116-3101-Bally_14-extract.fits -> ../LL-shapes-2017/116-3101-Bally_14-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc14010_wcs/119-3155-Bally_14-extract.fits -> ../LL-shapes-2017/119-3155-Bally_14-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc14010_wcs/136-3057-Bally_14-extract.fits -> ../LL-shapes-2017/136-3057-Bally_14-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc14010_wcs/138-3024-Bally_14-extract.fits -> ../LL-shapes-2017/138-3024-Bally_14-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc14010_wcs/203-3039-Bally_14-extract.fits -> ../LL-shapes-2017/203-3039-Bally_14-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc16010_wcs/022-635-Bally_16-extract.fits -> ../LL-shapes-2017/022-635-Bally_16-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc16010_wcs/041-637-Bally_16-extract.fits -> ../LL-shapes-2017/041-637-Bally_16-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc16010_wcs/042-628-Bally_16-extract.fits -> ../LL-shapes-2017/042-628-Bally_16-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc16010_wcs/4582-635-Bally_16-extract.fits -> ../LL-shapes-2017/4582-635-Bally_16-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc16010_wcs/w005-514-Bally_16-extract.fits -> ../LL-shapes-2017/w005-514-Bally_16-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc17010_wcs/4468-605-Bally_17-extract.fits -> ../LL-shapes-2017/4468-605-Bally_17-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc17010_wcs/LL3-Bally_17-extract.fits -> ../LL-shapes-2017/LL3-Bally_17-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc18010_wcs/LL2-Bally_18-extract.fits -> ../LL-shapes-2017/LL2-Bally_18-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc24010_wcs/LL4-Bally_01-extract.fits -> ../LL-shapes-2017/LL4-Bally_01-extract.fits
/Users/will/Dropbox/LuisBowshocks/j8oc24010_wcs/LL4-Bally_24-extract.fits -> ../LL-shapes-2017/LL4-Bally_24-extract.fits
#+end_example
