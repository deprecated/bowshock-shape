* Characteristic radii for LL arcs (and other bow shocks)
** New version of table of the characteristic radii and accompanying plot
#+name: harvest-radii-rc
#+BEGIN_SRC python :return table
  import json

  SOURCES = [
      "w073-227", "109-246", "w000-400", "w005-514", "w012-407", "w030-524",
      "042-628", "LL1", "w069-601", "4285-458", "LL3", "LL4",
      "4468-605", "116-3101", "w266-558", "308-3036", "LL5", "LL6"
  ]


  radii_header = ['R0/D', 'Rc/R0', 'R90/R0', 'Rm90/R0']
  header = [['Source', 'D', *radii_header, *radii_header], None]
  INVALID = -999.00
  body = []
  for source in SOURCES:
      jfile = f'{source}-arcdata.json'
      data = json.load(open(jfile))
      assert source == data['star']['id']
      D = data['star']['D']
      row = [source[1:] if source.startswith('w') else source, f'{D:.2f}']
      for arc in 'inner', 'outer':
          if arc in data:
              R0 = data[arc]['R0']
              Rc = data[arc]['Rc'] / R0
              if 'R90' in data[arc]:
                  Rm90, R90 = data[arc]['R90']
                  if Rm90 > 0.0:
                      Rm90 /= R0
                  if R90 > 0.0:
                      R90 /= R0
              else:
                  Rm90, R90 = INVALID, INVALID
              row += [f'{_:.2f}' for _ in [100*R0/D, Rc, Rm90, R90]]
          else:
              row += [f'{_:.2f}' for _ in [INVALID, INVALID, INVALID, INVALID]]
      body.append(row)

  #body.sort(key=lambda x: x[0])
  table = header + body

#+END_SRC

#+RESULTS: harvest-radii-rc
|   Source |      D |    R0/D |   Rc/R0 |  R90/R0 | Rm90/R0 | R0/D | Rc/R0 |  R90/R0 | Rm90/R0 |
|----------+--------+---------+---------+---------+---------+------+-------+---------+---------|
|  073-227 | 147.26 |    0.65 |    6.47 | -999.00 |    3.12 | 1.09 |  3.20 | -999.00 |    5.22 |
|  109-246 |  89.67 |    1.34 |   27.23 |    1.83 | -999.00 | 2.11 |  6.22 |    2.65 | -999.00 |
|  000-400 | 254.03 |    0.31 |    3.37 |    2.46 |    2.34 | 0.58 |  2.21 |    2.59 |    2.25 |
|  005-514 | 262.64 |    0.44 |    2.76 | -999.00 | -999.00 | 0.61 |  1.71 |    1.50 | -999.00 |
|  012-407 | 231.47 | -999.00 | -999.00 | -999.00 | -999.00 | 0.99 |  1.86 | -999.00 |    1.92 |
|  030-524 | 234.09 |    0.16 |    1.99 |    2.33 |    2.91 | 0.27 |  3.84 |    2.17 |    3.10 |
|  042-628 | 259.60 |    0.69 |    2.77 |    1.67 | -999.00 | 1.19 |  1.87 |    1.58 |    2.32 |
|      LL1 | 198.63 |    0.96 |    2.61 |    3.05 |    2.05 | 1.54 |  2.46 |    2.14 |    2.28 |
|  069-601 | 212.20 |    0.21 |    2.90 |    2.42 |    3.39 | 0.42 |  2.05 |    2.13 |    2.09 |
| 4285-458 | 721.18 | -999.00 | -999.00 | -999.00 | -999.00 | 0.27 |  2.56 |    1.68 |    2.44 |
|      LL3 | 566.33 |    0.26 |    2.35 | -999.00 | -999.00 | 0.55 |  1.94 |    1.54 |    2.41 |
|      LL4 | 593.14 |    0.24 |    5.81 |    4.67 |    3.35 | 0.43 |  2.35 |    2.69 |    2.93 |
| 4468-605 | 471.31 |    0.28 |    2.47 |    1.35 |    1.52 | 0.53 |  1.80 |    2.58 |    1.58 |
| 116-3101 | 463.92 |    0.22 |    1.41 |    1.72 |    1.74 | 0.31 |  1.42 |    1.52 |    1.84 |
|  266-558 | 218.16 |    0.51 |    1.79 | -999.00 |    1.25 | 0.94 |  1.92 |    1.98 |    2.94 |
| 308-3036 | 484.14 |    0.29 |    1.35 | -999.00 |    1.05 | 0.52 |  1.50 |    1.49 |    2.08 |
|      LL5 | 369.55 |    0.40 |    2.63 |    1.59 |    2.69 | 0.78 |  3.03 |    2.22 |    4.40 |
|      LL6 | 485.83 |    0.33 |    6.01 |    3.77 |    4.31 | 0.77 |  5.57 | -999.00 |    2.75 |


#+header: :var T=harvest-radii-rc TRSG=harvest-radii-rc-rsg
#+BEGIN_SRC python :eval no :tangle new-observed-R90-vs-Rc.py
  import sys
  import numpy as np
  from matplotlib import pyplot as plt
  import matplotlib.ticker
  import seaborn as sns
  from astropy.table import Table

  cols = ['Source', 'D',
          'R0 in', 'Rc in', 'R90 in', 'Rm90 in',
          'R0 out', 'Rc out', 'R90 out', 'Rm90 out',
  ]
  cols2 = ['Source',
          'R0 out', 'Rc out', 'R90 out', 'Rm90 out',
  ]
  dtype = [str] + [float]*9
  dtype2 = [str] + [float]*4
  table_LL = Table(rows=T, names=cols, dtype=dtype)
  table_RSG = Table(rows=TRSG, names=cols2, dtype=dtype2)

  Rcols = [_ for _ in cols if _.startswith('R')]

  for table in table_LL, table_RSG:
      for col in Rcols:
          if col in table.colnames:
              m = table[col] < 0.0
              table[col][m] = np.nan

      # Take average +/- std of the +ve and -ve R90
      R90stack = np.stack([table['R90 out'], table['Rm90 out']])
      table['R90'] = np.nanmean(R90stack, axis=0)
      table['dR90'] = np.nanstd(R90stack, axis=0)
      table.remove_columns(['R90 out', 'Rm90 out'])

  table_LL.write('ll-arcs-radii.tab', overwrite=True, format='ascii.tab')
  table_RSG.write('rsg-arcs-radii.tab', overwrite=True, format='ascii.tab')

  plotfile = sys.argv[0].replace('.py', '.pdf')

  sns.set_style('white')

  fig, ax = plt.subplots(figsize=(5, 5))
  Rc_grid = np.linspace(0.0, 10.0, 2000)
  R90_T0_grid = np.sqrt(2*Rc_grid)
  R90_T1_grid = np.sqrt(2*Rc_grid - 1.0)
  R90_T1_grid[~np.isfinite(R90_T1_grid)] = 0.0 

  ax.fill_between(Rc_grid, R90_T1_grid, R90_T0_grid, color='k', alpha=0.2)
  ax.fill_between(Rc_grid, R90_T0_grid, color='k', alpha=0.1)
  ax.plot(Rc_grid, R90_T0_grid, c='k', lw=0.5)
  ax.axhline(1.0, lw=0.5, alpha=0.5, color='k', zorder=-1)
  ax.axvline(1.0, lw=0.5, alpha=0.5, color='k', zorder=-1)
  ax.plot([0.0, 10.0], [0.0, 10.0], lw=0.5, alpha=0.5, color='k', zorder=-1)

  ax.scatter(table_LL['Rc out'], table_LL['R90'], s=40*table_LL['R0 out'])
  ax.errorbar(table_LL['Rc out'], table_LL['R90'], yerr=table_LL['dR90'], fmt='none', alpha=0.3)

  ax.scatter(table_RSG['Rc out'], table_RSG['R90'], s=10, c='r', alpha=0.8)
  ax.errorbar(table_RSG['Rc out'], table_RSG['R90'], yerr=table_RSG['dR90'], fmt='none', alpha=0.3)

  ax.set(
      yscale='linear',
      xscale='linear',
      xlim=[0.0, 8.1],
      ylim=[0.0, 8.1],
  #    ylim=[-3.0, 1.1],
      xlabel=r"Projected dimensionless radius of curvature: $\widetilde{R}_{c}{}'$",
      ylabel=r"Projected dimensionless perpendicular radius: $\widetilde{R}_{90}{}'$",
  )        


  fig.tight_layout()
  fig.savefig(plotfile)
  print(plotfile, end='')
#+END_SRC

#+BEGIN_SRC sh :results file
python new-observed-R90-vs-Rc.py
#+END_SRC

#+RESULTS:
[[file:new-observed-R90-vs-Rc.pdf]]




** Make a table of the characteristic radii
#+BEGIN_SRC python :return table
  import json

  # Plot the observational data
  arc_data_ll = '../read-shapes-LL/radii-set.json'
  data = json.load(open(arc_data_ll))['outer']

  sources = list(data['R0'].keys())

  header = [['Source', 'R0', 'Rc / R0', 'R90 / R0', 'Rm90 / R0'], None]

  body = []
  for source in sources:
      row = [source[1:] if source.startswith('w') else source,
             f"{data['R0'][source]:.2f}",
             f"{data['Rc'][source] /  data['R0'][source]:.2f}"]
      if data['R90'][source]:
          row.append(f"{data['R90'][source] / data['R0'][source]:.2f}")
      else:
          row.append( '--' )
      if data['Rm90'][source]:
          row.append(f"{data['Rm90'][source] / data['R0'][source]:.2f}")
      else:
          row.append( '--' )
      body.append(row)

  body.sort(key=lambda x: x[0])

  table = header + body

#+END_SRC

#+RESULTS:
|   Source |   R0 | Rc / R0 | R90 / R0 | Rm90 / R0 |
|----------+------+---------+----------+-----------|
|  000-400 | 1.46 |    2.01 | 2.25     |      2.59 |
|  005-514 | 1.67 |    2.02 | --       |      1.26 |
|  012-407 | 2.29 |    1.99 | 1.92     |        -- |
|  030-524 | 0.63 |    2.67 | 3.50     |      2.13 |
|  042-628 | 3.07 |    2.03 | --       |      1.51 |
|  065-502 | 1.42 |    2.94 | 4.26     |        -- |
|  069-601 | 0.85 |    2.02 | --       |      1.69 |
|  073-227 | 1.63 |    2.00 | 3.39     |        -- |
|  109-246 | 1.95 |    2.09 | 2.91     |        -- |
| 116-3101 | 1.45 |    1.98 | --       |      1.46 |
|  266-558 | 1.88 |    2.05 | --       |      2.15 |
| 308-3036 | 2.56 |    1.93 | --       |      1.53 |
| 4285-458 | 1.91 |    2.03 | --       |      1.72 |
| 4468-605 | 2.47 |    2.02 | --       |        -- |
|      LL1 | 3.06 |    2.01 | 2.28     |      2.14 |
|      LL2 | 4.03 |    3.39 | --       |      3.29 |
|      LL3 | 3.12 |    2.01 | --       |      1.54 |
|      LL4 | 2.41 |    2.06 | 3.20     |      2.75 |
|      LL6 | 3.63 |    3.58 | 3.37     |        -- |



** Placement on the R90-Rc diagram
#+BEGIN_SRC python :eval no :tangle observed-R90-vs-Rc.py
  import sys
  import numpy as np
  from matplotlib import pyplot as plt
  import matplotlib.ticker
  import seaborn as sns
  import json

  plotfile = sys.argv[0].replace('.py', '.pdf')

  sns.set_style('white')

  fig, ax = plt.subplots(figsize=(5, 5))
  Rc_grid = np.linspace(0.0, 10.0, 2000)
  R90_T0_grid = np.sqrt(2*Rc_grid)
  R90_T1_grid = np.sqrt(2*Rc_grid - 1.0)
  R90_T1_grid[~np.isfinite(R90_T1_grid)] = 0.0 

  ax.fill_between(Rc_grid, R90_T1_grid, R90_T0_grid, color='k', alpha=0.2)
  ax.fill_between(Rc_grid, R90_T0_grid, color='k', alpha=0.1)
  ax.plot(Rc_grid, R90_T0_grid, c='k', lw=0.5)
  ax.axhline(1.0, lw=0.5, alpha=0.5, color='k', zorder=-1)
  ax.axvline(1.0, lw=0.5, alpha=0.5, color='k', zorder=-1)
  ax.plot([0.0, 10.0], [0.0, 10.0], lw=0.5, alpha=0.5, color='k', zorder=-1)

  # Plot the observational data
  arc_data_ll = '../read-shapes-LL/radii-set.json'
  data = json.load(open(arc_data_ll))['outer']
  sources = list(data['R0'].keys())
  x, y = [], []
  for source in sources:
      try:
          y.append(0.5*(data['R90'][source] + data['Rm90'][source])
                   / data['R0'][source])
      except:
          try:
              y.append(data['R90'][source] / data['R0'][source])
          except:
              try:
                  y.append(data['Rm90'][source] / data['R0'][source])
              except:
                  continue
      x.append(data['Rc'][source] / data['R0'][source])

  ax.scatter(x, y)

  ax.set(
      yscale='linear',
      xscale='linear',
      xlim=[0.0, 5.1],
      ylim=[0.0, 5.1],
  #    ylim=[-3.0, 1.1],
      xlabel=r"Projected dimensionless radius of curvature: $\widetilde{R}_{c}{}'$",
      ylabel=r"Projected dimensionless perpendicular radius: $\widetilde{R}_{90}{}'$",
  )        


  fig.tight_layout()
  fig.savefig(plotfile)
  print(plotfile, end='')

#+END_SRC

#+BEGIN_SRC sh :results file
python observed-R90-vs-Rc.py
#+END_SRC

#+RESULTS:
[[file:observed-R90-vs-Rc.pdf]]



** Re-doing the arc tracing and fits
+ In lots of cases, the points are too sparse around the head of the bow shock to get a good estimate of the radius of curvature with \pm 45\deg
+ So I am re-doing them all:
+ Workflow:
  1. Add more points on the fits file regions 
     - guided by using lots of finely spaced contour levels
     - experiment with different levels of smoothing (usually more smoothing required in fainter parts of the arc)
     - In most cases, trace the region with highest density of contours (which is like edge detection)
  2. Run =find-xy-shell.py=
  3. Run =fit-circle-shell.py= with options =--savefig  --thmax 45=
     - In some cases, it seemed necessary to use a larger ~thmax~, but in nearly all cases this was solved by adding more points near the apex
     - Sources that still needed a different ~thmax~:
       - LL5 :: 60
  4. Look at the results in ~SOURCE-arcfits.pdf~ to make sure it is OK
  5. And check the numbers in ~SOURCE-arcdata.json~ too
     - Iterate if necessary
+ We are mainly using the outer boundary of the arcs, but we have also measured the inner edge in some cases


** Turns out that it should have been 069-601 all along

#+BEGIN_SRC python :eval no :tangle new-069-601-circle-fit.py
  import sys 
  sys.path.append("/Users/will/Dropbox/circle-fit")
  import circle_fit

  for arc in "inner", "outer", "ridge":
      for delta_theta in 45, 50, 55, 60, 65, 70, 75, 80:
          plotfile = f"069-601-{arc}-{delta_theta:02d}.pdf"
          print('#### '*10)
          print("Creating", plotfile)
          circle_fit.plot_solution(
              f"new-069-601-{arc}.reg",
              "w069-601-Bally_01-extract.fits",
              plotfile,
              delta_theta=delta_theta, vmin=6.0, vmax=8.2, sigma=1.5)
#+END_SRC

#+BEGIN_SRC sh :results verbatim
python new-069-601-circle-fit.py
#+END_SRC

#+RESULTS:
#+begin_example
#### #### #### #### #### #### #### #### #### #### 
Creating 069-601-inner-45.pdf
CircleFit(Planitude = 6.848893090009192, Alatude = [ 3.42949555  3.33034218])
CircleFit(Planitude = 2.869404464683888, Alatude = [ 3.22117951  2.4720784 ])
CircleFit(Planitude = 2.869404464683888, Alatude = [ 3.22117951  2.4720784 ])
CircleFit(Planitude = 2.869404464683888, Alatude = [ 3.22117951  2.4720784 ])
#### #### #### #### #### #### #### #### #### #### 
Creating 069-601-inner-50.pdf
CircleFit(Planitude = 6.848893090009192, Alatude = [ 3.42949555  3.33034218])
CircleFit(Planitude = 2.869404464683888, Alatude = [ 3.22117951  2.4720784 ])
CircleFit(Planitude = 2.869404464683888, Alatude = [ 3.22117951  2.4720784 ])
CircleFit(Planitude = 2.869404464683888, Alatude = [ 3.22117951  2.4720784 ])
#### #### #### #### #### #### #### #### #### #### 
Creating 069-601-inner-55.pdf
CircleFit(Planitude = 6.848893090009192, Alatude = [ 3.42949555  3.33034218])
CircleFit(Planitude = 2.869404464683888, Alatude = [ 3.22117951  2.4720784 ])
CircleFit(Planitude = 2.869404464683888, Alatude = [ 3.22117951  2.4720784 ])
CircleFit(Planitude = 2.869404464683888, Alatude = [ 3.22117951  2.4720784 ])
#### #### #### #### #### #### #### #### #### #### 
Creating 069-601-inner-60.pdf
CircleFit(Planitude = 6.848893090009192, Alatude = [ 3.42949555  3.33034218])
CircleFit(Planitude = 4.2094889097496795, Alatude = [ 3.29966039  2.50149778])
CircleFit(Planitude = 4.2094889097496795, Alatude = [ 3.29966039  2.50149778])
CircleFit(Planitude = 4.2094889097496795, Alatude = [ 3.29966039  2.50149778])
#### #### #### #### #### #### #### #### #### #### 
Creating 069-601-inner-65.pdf
CircleFit(Planitude = 6.848893090009192, Alatude = [ 3.42949555  3.33034218])
CircleFit(Planitude = 4.2094889097496795, Alatude = [ 3.29966039  2.50149778])
CircleFit(Planitude = 3.7288483913636323, Alatude = [ 3.37596603  2.43507017])
CircleFit(Planitude = 3.7288483913636323, Alatude = [ 3.37596603  2.43507017])
#### #### #### #### #### #### #### #### #### #### 
Creating 069-601-inner-70.pdf
CircleFit(Planitude = 6.848893090009192, Alatude = [ 3.42949555  3.33034218])
CircleFit(Planitude = 3.7288483913636323, Alatude = [ 3.37596603  2.43507017])
CircleFit(Planitude = 3.7288483913636323, Alatude = [ 3.37596603  2.43507017])
CircleFit(Planitude = 3.7288483913636323, Alatude = [ 3.37596603  2.43507017])
#### #### #### #### #### #### #### #### #### #### 
Creating 069-601-inner-75.pdf
CircleFit(Planitude = 6.848893090009192, Alatude = [ 3.42949555  3.33034218])
CircleFit(Planitude = 3.371937008212076, Alatude = [ 3.31093939  2.43364032])
CircleFit(Planitude = 3.7288483913636323, Alatude = [ 3.37596603  2.43507017])
CircleFit(Planitude = 3.7288483913636323, Alatude = [ 3.37596603  2.43507017])
#### #### #### #### #### #### #### #### #### #### 
Creating 069-601-inner-80.pdf
CircleFit(Planitude = 6.848893090009192, Alatude = [ 3.42949555  3.33034218])
CircleFit(Planitude = 3.371937008212076, Alatude = [ 3.31093939  2.43364032])
CircleFit(Planitude = 3.6594621452472738, Alatude = [ 3.25216993  2.50230339])
CircleFit(Planitude = 3.6594621452472738, Alatude = [ 3.25216993  2.50230339])
#### #### #### #### #### #### #### #### #### #### 
Creating 069-601-outer-45.pdf
CircleFit(Planitude = 4.698399726841056, Alatude = [ 2.72641614  2.4268865 ])
CircleFit(Planitude = 2.1903953822632927, Alatude = [ 2.1508751   2.05370453])
CircleFit(Planitude = 2.35801789120365, Alatude = [ 2.13858095  2.0739433 ])
CircleFit(Planitude = 2.35801789120365, Alatude = [ 2.13858095  2.0739433 ])
#### #### #### #### #### #### #### #### #### #### 
Creating 069-601-outer-50.pdf
CircleFit(Planitude = 4.698399726841056, Alatude = [ 2.72641614  2.4268865 ])
CircleFit(Planitude = 2.1903953822632927, Alatude = [ 2.1508751   2.05370453])
CircleFit(Planitude = 2.1903953822632927, Alatude = [ 2.1508751   2.05370453])
CircleFit(Planitude = 2.1903953822632927, Alatude = [ 2.1508751   2.05370453])
#### #### #### #### #### #### #### #### #### #### 
Creating 069-601-outer-55.pdf
CircleFit(Planitude = 4.698399726841056, Alatude = [ 2.72641614  2.4268865 ])
CircleFit(Planitude = 2.1903953822632927, Alatude = [ 2.1508751   2.05370453])
CircleFit(Planitude = 2.1903953822632927, Alatude = [ 2.1508751   2.05370453])
CircleFit(Planitude = 2.1903953822632927, Alatude = [ 2.1508751   2.05370453])
#### #### #### #### #### #### #### #### #### #### 
Creating 069-601-outer-60.pdf
CircleFit(Planitude = 4.698399726841056, Alatude = [ 2.72641614  2.4268865 ])
CircleFit(Planitude = 2.1448636738652445, Alatude = [ 2.099955    2.10138402])
CircleFit(Planitude = 2.035314827711842, Alatude = [ 2.11507736  2.07363667])
CircleFit(Planitude = 2.035314827711842, Alatude = [ 2.11507736  2.07363667])
#### #### #### #### #### #### #### #### #### #### 
Creating 069-601-outer-65.pdf
CircleFit(Planitude = 4.698399726841056, Alatude = [ 2.72641614  2.4268865 ])
CircleFit(Planitude = 2.1448636738652445, Alatude = [ 2.099955    2.10138402])
CircleFit(Planitude = 2.1448636738652445, Alatude = [ 2.099955    2.10138402])
CircleFit(Planitude = 2.1448636738652445, Alatude = [ 2.099955    2.10138402])
#### #### #### #### #### #### #### #### #### #### 
Creating 069-601-outer-70.pdf
CircleFit(Planitude = 4.698399726841056, Alatude = [ 2.72641614  2.4268865 ])
CircleFit(Planitude = 2.1448636738652445, Alatude = [ 2.099955    2.10138402])
CircleFit(Planitude = 2.213944966487505, Alatude = [ 2.12137453  2.09139604])
CircleFit(Planitude = 2.213944966487505, Alatude = [ 2.12137453  2.09139604])
#### #### #### #### #### #### #### #### #### #### 
Creating 069-601-outer-75.pdf
CircleFit(Planitude = 4.698399726841056, Alatude = [ 2.72641614  2.4268865 ])
CircleFit(Planitude = 2.2925387890673457, Alatude = [ 2.11114539  2.11514696])
CircleFit(Planitude = 2.2925387890673457, Alatude = [ 2.11114539  2.11514696])
CircleFit(Planitude = 2.2925387890673457, Alatude = [ 2.11114539  2.11514696])
#### #### #### #### #### #### #### #### #### #### 
Creating 069-601-outer-80.pdf
CircleFit(Planitude = 4.698399726841056, Alatude = [ 2.72641614  2.4268865 ])
CircleFit(Planitude = 2.443427569527076, Alatude = [ 2.11240704  2.14811635])
CircleFit(Planitude = 2.403225275345836, Alatude = [ 2.14886404  2.10219567])
CircleFit(Planitude = 2.403225275345836, Alatude = [ 2.14886404  2.10219567])
#### #### #### #### #### #### #### #### #### #### 
Creating 069-601-ridge-45.pdf
CircleFit(Planitude = 4.837910839541476, Alatude = [ 2.83736509  2.52474279])
CircleFit(Planitude = 4.354038675553073, Alatude = [ 2.32665905  2.11318124])
CircleFit(Planitude = 4.354038675553073, Alatude = [ 2.32665905  2.11318124])
CircleFit(Planitude = 4.354038675553073, Alatude = [ 2.32665905  2.11318124])
#### #### #### #### #### #### #### #### #### #### 
Creating 069-601-ridge-50.pdf
CircleFit(Planitude = 4.837910839541476, Alatude = [ 2.83736509  2.52474279])
CircleFit(Planitude = 4.354038675553073, Alatude = [ 2.32665905  2.11318124])
CircleFit(Planitude = 4.354038675553073, Alatude = [ 2.32665905  2.11318124])
CircleFit(Planitude = 4.354038675553073, Alatude = [ 2.32665905  2.11318124])
#### #### #### #### #### #### #### #### #### #### 
Creating 069-601-ridge-55.pdf
CircleFit(Planitude = 4.837910839541476, Alatude = [ 2.83736509  2.52474279])
CircleFit(Planitude = 2.6645791651676087, Alatude = [ 2.2507235   2.12105265])
CircleFit(Planitude = 3.0453334870042448, Alatude = [ 2.23063979  2.16624397])
CircleFit(Planitude = 3.0453334870042448, Alatude = [ 2.23063979  2.16624397])
#### #### #### #### #### #### #### #### #### #### 
Creating 069-601-ridge-60.pdf
CircleFit(Planitude = 4.837910839541476, Alatude = [ 2.83736509  2.52474279])
CircleFit(Planitude = 2.619293365075308, Alatude = [ 2.24188841  2.12604051])
CircleFit(Planitude = 2.619293365075308, Alatude = [ 2.24188841  2.12604051])
CircleFit(Planitude = 2.619293365075308, Alatude = [ 2.24188841  2.12604051])
#### #### #### #### #### #### #### #### #### #### 
Creating 069-601-ridge-65.pdf
CircleFit(Planitude = 4.837910839541476, Alatude = [ 2.83736509  2.52474279])
CircleFit(Planitude = 2.496116869755157, Alatude = [ 2.25077639  2.10309454])
CircleFit(Planitude = 2.496116869755157, Alatude = [ 2.25077639  2.10309454])
CircleFit(Planitude = 2.496116869755157, Alatude = [ 2.25077639  2.10309454])
#### #### #### #### #### #### #### #### #### #### 
Creating 069-601-ridge-70.pdf
CircleFit(Planitude = 4.837910839541476, Alatude = [ 2.83736509  2.52474279])
CircleFit(Planitude = 2.3846778871140057, Alatude = [ 2.21950125  2.11872848])
CircleFit(Planitude = 2.3846778871140057, Alatude = [ 2.21950125  2.11872848])
CircleFit(Planitude = 2.3846778871140057, Alatude = [ 2.21950125  2.11872848])
#### #### #### #### #### #### #### #### #### #### 
Creating 069-601-ridge-75.pdf
CircleFit(Planitude = 4.837910839541476, Alatude = [ 2.83736509  2.52474279])
CircleFit(Planitude = 2.355393621095177, Alatude = [ 2.21190496  2.1208954 ])
CircleFit(Planitude = 2.355393621095177, Alatude = [ 2.21190496  2.1208954 ])
CircleFit(Planitude = 2.355393621095177, Alatude = [ 2.21190496  2.1208954 ])
#### #### #### #### #### #### #### #### #### #### 
Creating 069-601-ridge-80.pdf
CircleFit(Planitude = 4.837910839541476, Alatude = [ 2.83736509  2.52474279])
CircleFit(Planitude = 2.199865758779868, Alatude = [ 2.23592603  2.06508013])
CircleFit(Planitude = 2.275794733312182, Alatude = [ 2.26513094  2.05658014])
CircleFit(Planitude = 2.275794733312182, Alatude = [ 2.26513094  2.05658014])
#+end_example






* 069-601 summary tables for \Delta\theta = 60 \to 80\deg
#+name: 069-601-inner-stats
|    |              Pi |              \Lambda- |              \Lambda+ |               \Lambda |              \Delta\Lambda |
|----+-----------------+-----------------+-----------------+-----------------+-----------------|
| 60 |     4.209488909 |      3.29966039 |      2.50149778 |           2.901 |           0.399 |
| 65 |     3.728848391 |      3.37596603 |      2.43507017 |           2.906 |           0.470 |
| 70 |     3.728848391 |      3.37596603 |      2.43507017 |           2.906 |           0.470 |
| 75 |     3.728848391 |      3.37596603 |      2.43507017 |           2.906 |           0.470 |
| 80 |     3.659462145 |      3.25216993 |      2.50230339 |           2.877 |           0.375 |
|----+-----------------+-----------------+-----------------+-----------------+-----------------|
|    | 3.811 +/- 0.100 | 3.336 +/- 0.026 | 2.462 +/- 0.016 | 2.899 +/- 0.006 | 0.437 +/- 0.021 |
|    |           0.225 |           0.057 |           0.037 |           0.013 |           0.046 |
#+TBLFM: $5=vmean([$-1, $-2]);f3::$6=($-3 - $-2)/2 ;f3::@7$2..@7$6=vmeane(@I..@II);f3::@8$2..@8$6=vsdev(@I..@II);f3

#+name: 069-601-ridge-stats
|    |              Pi |              \Lambda- |              \Lambda+ |               \Lambda |              \Delta\Lambda |
|----+-----------------+-----------------+-----------------+-----------------+-----------------|
| 60 |      2.61929336 |      2.24188841 |      2.12604051 |           2.184 |           0.058 |
| 65 |      2.49611686 |      2.25077639 |      2.10309454 |           2.177 |           0.074 |
| 70 |     2.384677887 |      2.21950125 |      2.11872848 |           2.169 |           0.050 |
| 75 |      2.35539362 |      2.21190496 |       2.1208954 |           2.166 |           0.046 |
| 80 |      2.27579473 |      2.26513094 |      2.05658014 |           2.161 |           0.104 |
|----+-----------------+-----------------+-----------------+-----------------+-----------------|
|    | 2.426 +/- 0.060 | 2.238 +/- 0.010 | 2.105 +/- 0.013 | 2.171 +/- 0.004 | 0.066 +/- 0.011 |
|    |           0.134 |           0.022 |           0.028 |           0.009 |           0.024 |
#+TBLFM: $5=vmean([$-1, $-2]);f3::$6=($-3 - $-2)/2 ;f3::@7$2..@7$6=vmeane(@I..@II);f3::@8$2..@8$6=vsdev(@I..@II);f3


#+name: 069-601-outer-stats
|    |              Pi |              \Lambda- |              \Lambda+ |               \Lambda |              \Delta\Lambda |
|----+-----------------+-----------------+-----------------+-----------------+-----------------|
| 60 |     2.035314827 |      2.11507736 |      2.07363667 |           2.094 |           0.021 |
| 65 |    2.1448636738 |        2.099955 |      2.10138402 |           2.101 |        -7.15e-4 |
| 70 |     2.213944966 |      2.12137453 |      2.09139604 |           2.106 |           0.015 |
| 75 |    2.2925387890 |      2.11114539 |      2.11514696 |           2.113 |          -0.002 |
| 80 |     2.403225275 |      2.14886404 |      2.10219567 |           2.126 |           0.023 |
|----+-----------------+-----------------+-----------------+-----------------+-----------------|
|    | 2.218 +/- 0.063 | 2.119 +/- 0.008 | 2.097 +/- 0.007 | 2.108 +/- 0.005 | 0.011 +/- 0.005 |
|    |           0.140 |           0.018 |           0.015 |           0.012 |           0.012 |
#+TBLFM: $5=vmean([$-1, $-2]);f3::$6=($-3 - $-2)/2 ;f3::@7$2..@7$6=vmeane(@I..@II);f3::@8$2..@8$6=vsdev(@I..@II);f3



#+name: 069-601-all-stats
|    |            Pi |            \Lambda- |            \Lambda+ |             \Lambda |            \Delta\Lambda |
|----+---------------+---------------+---------------+---------------+---------------|
| 60 |   4.209488909 |    3.29966039 |    2.50149778 |         2.901 |         0.399 |
| 65 |   3.728848391 |    3.37596603 |    2.43507017 |         2.906 |         0.470 |
| 70 |   3.728848391 |    3.37596603 |    2.43507017 |         2.906 |         0.470 |
| 75 |   3.728848391 |    3.37596603 |    2.43507017 |         2.906 |         0.470 |
| 80 |   3.659462145 |    3.25216993 |    2.50230339 |         2.877 |         0.375 |
| 60 |    2.61929336 |    2.24188841 |    2.12604051 |         2.184 |         0.058 |
| 65 |    2.49611686 |    2.25077639 |    2.10309454 |         2.177 |         0.074 |
| 70 |   2.384677887 |    2.21950125 |    2.11872848 |         2.169 |         0.050 |
| 75 |    2.35539362 |    2.21190496 |     2.1208954 |         2.166 |         0.046 |
| 80 |    2.27579473 |    2.26513094 |    2.05658014 |         2.161 |         0.104 |
| 60 |   2.035314827 |    2.11507736 |    2.07363667 |         2.094 |         0.021 |
| 65 |  2.1448636738 |      2.099955 |    2.10138402 |         2.101 |      -7.15e-4 |
| 70 |   2.213944966 |    2.12137453 |    2.09139604 |         2.106 |         0.015 |
| 75 |  2.2925387890 |    2.11114539 |    2.11514696 |         2.113 |        -0.002 |
| 80 |   2.403225275 |    2.14886404 |    2.10219567 |         2.126 |         0.023 |
|----+---------------+---------------+---------------+---------------+---------------|
|    | 2.82 +/- 0.19 | 2.56 +/- 0.15 | 2.22 +/- 0.05 | 2.39 +/- 0.10 | 0.17 +/- 0.05 |
|    |          0.75 |          0.57 |          0.18 |          0.37 |          0.20 |
#+TBLFM: $5=vmean([$-1, $-2]);f3::$6=($-3 - $-2)/2 ;f3::@17$2..@17$6=vmeane(@I..@II);f2::@18$2..@18$6=vsdev(@I..@II);f2


*** 069-601 results for \Delta\theta = 75
 | Curve |               \Pi |              \Lambda- |              \Lambda+ |
 |-------+-----------------+-----------------+-----------------|
 | Inner |           3.728 |           3.375 |           2.435 |
 | Ridge |           2.619 |           2.241 |           2.126 |
 | Outer |           2.035 |           2.115 |           2.074 |
 |-------+-----------------+-----------------+-----------------|
 |       | 2.794 +/- 0.496 | 2.577 +/- 0.401 | 2.212 +/- 0.113 |
  #+TBLFM: @5$2..@5$4=vmeane(@I..@II);f3
 
*** 069-601 results for \Delta\theta = 60
 | Curve |               \Pi |              \Lambda- |              \Lambda+ |
 |-------+-----------------+-----------------+-----------------|
 | Inner |           4.209 |           3.299 |           2.501 |
 | Ridge |           2.355 |           2.211 |           2.120 |
 | Outer |           2.292 |           2.111 |           2.115 |
 |-------+-----------------+-----------------+-----------------|
 |       | 2.792 +/- 0.469 | 2.566 +/- 0.406 | 2.223 +/- 0.106 |
  #+TBLFM: @5$2..@5$4=vmeane(@I..@II);f3
 

*** 069-601 results for \Pi vs \Delta\theta
#+name: planitude-Dtheta-069-601
| D theta | Outer | Ridge | Inner |
|---------+-------+-------+-------|
|      45 | 2.358 | 4.354 | 2.869 |
|      50 | 2.190 | 4.354 | 2.869 |
|      55 | 2.190 | 3.045 | 2.869 |
|      60 | 2.035 | 2.619 | 4.209 |
|      65 | 2.144 | 2.496 | 3.728 |
|      70 | 2.214 | 2.384 | 3.728 |
|      75 | 2.292 | 2.355 | 3.728 |
|      80 | 2.403 | 2.275 | 3.659 |
|---------+-------+-------+-------|
|  Median | 2.202 | 2.558 | 3.694 |
|     MAD | 0.074 | 0.243 | 0.275 |
#+TBLFM: @10$2..@10$4=vmedian(@I..@II);f3::@11$2..@11$4=vmedian(map(lambda(x, abs(x - @-1)), @I..@II));f3

#+header: :var INPUT=planitude-Dtheta-069-601
#+BEGIN_SRC python :eval no :tangle 069-601-Pi-vs-Dtheta.py 
  import sys
  import numpy as np
  from astropy.table import Table
  from matplotlib import pyplot as plt
  import seaborn as sns

  tab = Table(rows=INPUT[1:9], names=INPUT[0])

  figfile = sys.argv[0].replace('.py', '.pdf')

  sns.set_color_codes()

  fig, ax = plt.subplots(figsize=(4, 4))
  arcs = "Inner", "Outer", "Ridge"
  colors = 'mcr'
  m = tab['D theta'] >= 60.0
  for arc, color in zip(arcs, colors):
      mean = np.mean(tab[arc][m])
      sigma = np.std(tab[arc][m])
      label = fr"{arc}: ${mean:.1f} \pm {sigma:.1f}$"
      ax.plot(tab['D theta'], tab[arc], 'o', color=color, label=label)
  ax.legend(title="M42 069-601")
  ax.axvspan(60.0, 80.0, color='0.9')
  ax.set(ylim=[0.0, 9.0],
         xlabel=r"$\Delta \theta$, degrees",
         xticks=tab['D theta'],
         ylabel=r"Fitted planitude, $\Pi'$")
  sns.despine(trim=True)
  fig.tight_layout()
  fig.savefig(figfile)
  print(figfile, end='')
#+END_SRC

#+BEGIN_SRC sh :results file
python 069-601-Pi-vs-Dtheta.py 
#+END_SRC

#+RESULTS:
[[file:069-601-Pi-vs-Dtheta.pdf]]


*** 069-601 planitude-alatude graph

Just copied from the 000-400 one with different data

#+BEGIN_SRC python :eval no :tangle 069-601-planitude-alatude.py
  import sys
  import numpy as np
  from scipy.interpolate import interp1d
  import statsmodels.api as sm
  from astropy.table import Table
  from matplotlib import pyplot as plt
  import matplotlib.ticker
  import seaborn as sns


  plotfile = sys.argv[0].replace('.py', '.pdf')

  sns.set_style('ticks')
  sns.set_color_codes()
  fig, ax = plt.subplots(figsize=(4, 4))

  Rc_grid = np.linspace(0.0, 10.0, 2000)
  R90_T0_grid = np.sqrt(2*Rc_grid)
  R90_T1_grid = np.sqrt(2*Rc_grid - 1.0)
  R90_T1_grid[~np.isfinite(R90_T1_grid)] = 0.0 

  ax.fill_between(Rc_grid, R90_T1_grid, R90_T0_grid, color='k', alpha=0.2)
  ax.fill_between(Rc_grid, R90_T0_grid, color='k', alpha=0.1)
  ax.plot(Rc_grid, R90_T0_grid, c='k', lw=0.5)
  ax.axhline(1.0, lw=0.5, alpha=0.5, color='k', zorder=-1)
  ax.axvline(1.0, lw=0.5, alpha=0.5, color='k', zorder=-1)
  ax.axhline(2.0, ls=':', lw=0.5, alpha=0.5, color='k', zorder=-1)
  ax.axvline(2.0, ls=':', lw=0.5, alpha=0.5, color='k', zorder=-1)
  ax.plot([0.9, 10.0], [0.9, 10.0], lw=0.5, alpha=0.5, color='k', zorder=-1)

  # Put a cross at the Wilkinoid coordinates: [5/3, sqrt(3)]
  ax.plot([5./3.], [np.sqrt(3.0)], '+', c='w', ms=10, alpha=1.0)

  labels = {
      "Inner": 2.1,
      "Outer": 2.3,
      "Ridge": 2.5,
  }
  for arcid, Pi, Lam_minus, Lam_plus in [
          ["Inner", 3.728, 3.375, 2.435],
          ["Ridge", 2.619, 2.241, 2.126],
          ["Outer", 2.035, 2.115, 2.074],
          ["Inner 60", 4.209, 3.299, 2.501],
          ["Ridge 60", 2.355, 2.211, 2.120],
          ["Outer 60", 2.292, 2.111, 2.115],
  ]:

      if "Ridge" in arcid:
          color = 'r'
      elif "Inner" in arcid:
          color = 'm'
      elif "Outer" in arcid:
          color = 'c'
      if "60" in arcid:
          sym = '.'
          lw = 0.7
      else:
          sym = 'o'
          lw = 1.5
      ax.plot([Pi, Pi], [Lam_minus, Lam_plus], '-', color=color, lw=lw)
      ax.plot([Pi, Pi], [Lam_minus, Lam_plus], sym, color=color)
      if arcid in labels:
          ax.text(Pi, labels[arcid], arcid.split()[0], color=color, ha='center')

  ax.text(2.5, 1.2, "M42 069-601")
  ax.set(
      xlim=[0., 5.1],
      ylim=[0., 5.1],
      #yticks=range(6),
      xlabel=r"Fitted planitude: $\Pi'$",
      ylabel=r"Fitted alatude: $\Lambda'$",
  )        
  sns.despine()
  fig.tight_layout(pad=0.5)
  fig.savefig(plotfile)
  print(plotfile, end='')



#+END_SRC

#+BEGIN_SRC sh :results file
python 069-601-planitude-alatude.py
#+END_SRC

#+RESULTS:
[[file:069-601-planitude-alatude.pdf]]


** Summary of M42 bows
+ Taking the (mean +/- sigma) values over \Delta\theta
  + Note that this is /not/ the ~vmeane~ values on the original tables, since those were (mean +/- sigma/n^{1/2}), which is inappropriate for systematic errors

|  Source | Bow   | Pi              | \Lambda               | \Delta\Lambda               |
|---------+-------+-----------------+-----------------+------------------|
| 000-400 | Inner | 2.869 +/- 0.188 | 2.397 +/- 0.041 | 0.347 +/- 0.080  |
| 000-400 | Ridge | 3.621 +/- 0.380 | 2.733 +/- 0.017 | 0.510 +/- 0.096  |
| 000-400 | Outer | 2.512 +/- 0.241 | 2.463 +/- 0.019 | -0.061 +/- 0.020 |
|---------+-------+-----------------+-----------------+------------------|
|         | All   | 3.00 +/- 0.54   | 2.53 +/- 0.15   | 0.16 +/- 0.16    |
|---------+-------+-----------------+-----------------+------------------|
| 069-601 | Inner | 3.811 +/- 0.225 | 2.899 +/- 0.013 | 0.437 +/- 0.046  |
| 069-601 | Ridge | 2.426 +/- 0.134 | 2.171 +/- 0.009 | 0.066 +/- 0.024  |
| 069-601 | Outer | 2.218 +/- 0.148 | 2.108 +/- 0.012 | 0.011 +/- 0.012  |
|---------+-------+-----------------+-----------------+------------------|
|         | All   | 2.82 +/- 0.75   | 2.39 +/- 0.37   | 0.17 +/- 0.20    |


** Focus on 000-400 for referee reply
+ I have entirely re-implemented the circle fitting
  + [[file:~/Dropbox/circle-fit/]]
  + Follows algorithm described in Appendix E


*** Redo 000-400 images based on experience with 069-601
#+BEGIN_SRC python :eval no :tangle new-000-400-circle-fit.py
  import sys 
  sys.path.append("/Users/will/Dropbox/circle-fit")
  import circle_fit

  for arc in "inner", "outer", "ridge":
      for delta_theta in 45, 50, 55, 60, 65, 70, 75, 80:
          plotfile = f"000-400-{arc}-{delta_theta:02d}.pdf"
          print('#### '*10)
          print("Creating", plotfile)
          circle_fit.plot_solution(
              f"new-w000-400-{arc}.reg",
              "w000-400-Bally_09-extract.fits",
              plotfile,
              delta_theta=delta_theta)
#+END_SRC

#+BEGIN_SRC sh :results verbatim
python new-000-400-circle-fit.py
#+END_SRC

#+RESULTS:
#+begin_example
#### #### #### #### #### #### #### #### #### #### 
Creating 000-400-inner-45.pdf
CircleFit(Planitude = 4.997085219763595, Alatude = [ 2.6393009   2.67011982])
CircleFit(Planitude = 2.3794880725730363, Alatude = [ 3.05273286  1.88517589])
CircleFit(Planitude = 3.3124603146097313, Alatude = [ 3.12725338  1.87832095])
CircleFit(Planitude = 3.3124603146097313, Alatude = [ 3.12725338  1.87832095])
#### #### #### #### #### #### #### #### #### #### 
Creating 000-400-inner-50.pdf
CircleFit(Planitude = 4.997085219763595, Alatude = [ 2.6393009   2.67011982])
CircleFit(Planitude = 2.3794880725730363, Alatude = [ 3.05273286  1.88517589])
CircleFit(Planitude = 3.1634871986926125, Alatude = [ 2.91822408  1.99889837])
CircleFit(Planitude = 2.3794880725730363, Alatude = [ 3.05273286  1.88517589])
#### #### #### #### #### #### #### #### #### #### 
Creating 000-400-inner-55.pdf
CircleFit(Planitude = 4.997085219763595, Alatude = [ 2.6393009   2.67011982])
CircleFit(Planitude = 2.197402828326022, Alatude = [ 3.05698924  1.86748363])
CircleFit(Planitude = 3.1634871986926125, Alatude = [ 2.91822408  1.99889837])
CircleFit(Planitude = 3.1634871986926125, Alatude = [ 2.91822408  1.99889837])
#### #### #### #### #### #### #### #### #### #### 
Creating 000-400-inner-60.pdf
CircleFit(Planitude = 4.997085219763595, Alatude = [ 2.6393009   2.67011982])
CircleFit(Planitude = 2.6918433824886803, Alatude = [ 2.79468727  2.02103903])
CircleFit(Planitude = 3.1634871986926125, Alatude = [ 2.91822408  1.99889837])
CircleFit(Planitude = 3.1634871986926125, Alatude = [ 2.91822408  1.99889837])
#### #### #### #### #### #### #### #### #### #### 
Creating 000-400-inner-65.pdf
CircleFit(Planitude = 4.997085219763595, Alatude = [ 2.6393009   2.67011982])
CircleFit(Planitude = 2.6918433824886803, Alatude = [ 2.79468727  2.02103903])
CircleFit(Planitude = 2.6918433824886803, Alatude = [ 2.79468727  2.02103903])
CircleFit(Planitude = 2.6918433824886803, Alatude = [ 2.79468727  2.02103903])
#### #### #### #### #### #### #### #### #### #### 
Creating 000-400-inner-70.pdf
CircleFit(Planitude = 4.997085219763595, Alatude = [ 2.6393009   2.67011982])
CircleFit(Planitude = 2.547714082794086, Alatude = [ 2.76943535  2.01536158])
CircleFit(Planitude = 2.911542081697771, Alatude = [ 2.73912333  2.05740144])
CircleFit(Planitude = 2.911542081697771, Alatude = [ 2.73912333  2.05740144])
#### #### #### #### #### #### #### #### #### #### 
Creating 000-400-inner-75.pdf
CircleFit(Planitude = 4.997085219763595, Alatude = [ 2.6393009   2.67011982])
CircleFit(Planitude = 2.7209954367629496, Alatude = [ 2.65410672  2.06889856])
CircleFit(Planitude = 2.7209954367629496, Alatude = [ 2.65410672  2.06889856])
CircleFit(Planitude = 2.7209954367629496, Alatude = [ 2.65410672  2.06889856])
#### #### #### #### #### #### #### #### #### #### 
Creating 000-400-inner-80.pdf
CircleFit(Planitude = 4.997085219763595, Alatude = [ 2.6393009   2.67011982])
CircleFit(Planitude = 2.5763354890306305, Alatude = [ 2.60311336  2.06544786])
CircleFit(Planitude = 2.8582442230742076, Alatude = [ 2.61112006  2.10063207])
CircleFit(Planitude = 2.8582442230742076, Alatude = [ 2.61112006  2.10063207])
#### #### #### #### #### #### #### #### #### #### 
Creating 000-400-outer-45.pdf
CircleFit(Planitude = 4.082748162430154, Alatude = [ 2.61635602  2.6982448 ])
CircleFit(Planitude = 1.7751786294607623, Alatude = [ 2.31495185  2.51974258])
CircleFit(Planitude = 1.7751786294607623, Alatude = [ 2.31495185  2.51974258])
CircleFit(Planitude = 1.7751786294607623, Alatude = [ 2.31495185  2.51974258])
#### #### #### #### #### #### #### #### #### #### 
Creating 000-400-outer-50.pdf
CircleFit(Planitude = 4.082748162430154, Alatude = [ 2.61635602  2.6982448 ])
CircleFit(Planitude = 1.7751786294607623, Alatude = [ 2.31495185  2.51974258])
CircleFit(Planitude = 1.7751786294607623, Alatude = [ 2.31495185  2.51974258])
CircleFit(Planitude = 1.7751786294607623, Alatude = [ 2.31495185  2.51974258])
#### #### #### #### #### #### #### #### #### #### 
Creating 000-400-outer-55.pdf
CircleFit(Planitude = 4.082748162430154, Alatude = [ 2.61635602  2.6982448 ])
CircleFit(Planitude = 1.7751786294607623, Alatude = [ 2.31495185  2.51974258])
CircleFit(Planitude = 2.1530258384323457, Alatude = [ 2.37869351  2.49517412])
CircleFit(Planitude = 2.1530258384323457, Alatude = [ 2.37869351  2.49517412])
#### #### #### #### #### #### #### #### #### #### 
Creating 000-400-outer-60.pdf
CircleFit(Planitude = 4.082748162430154, Alatude = [ 2.61635602  2.6982448 ])
CircleFit(Planitude = 2.186326606436131, Alatude = [ 2.36793785  2.51169028])
CircleFit(Planitude = 2.186326606436131, Alatude = [ 2.36793785  2.51169028])
CircleFit(Planitude = 2.186326606436131, Alatude = [ 2.36793785  2.51169028])
#### #### #### #### #### #### #### #### #### #### 
Creating 000-400-outer-65.pdf
CircleFit(Planitude = 4.082748162430154, Alatude = [ 2.61635602  2.6982448 ])
CircleFit(Planitude = 2.3958351503656954, Alatude = [ 2.42306254  2.47884924])
CircleFit(Planitude = 2.3958351503656954, Alatude = [ 2.42306254  2.47884924])
CircleFit(Planitude = 2.3958351503656954, Alatude = [ 2.42306254  2.47884924])
#### #### #### #### #### #### #### #### #### #### 
Creating 000-400-outer-70.pdf
CircleFit(Planitude = 4.082748162430154, Alatude = [ 2.61635602  2.6982448 ])
CircleFit(Planitude = 2.4781225108270877, Alatude = [ 2.40200279  2.51540495])
CircleFit(Planitude = 2.4781225108270877, Alatude = [ 2.40200279  2.51540495])
CircleFit(Planitude = 2.4781225108270877, Alatude = [ 2.40200279  2.51540495])
#### #### #### #### #### #### #### #### #### #### 
Creating 000-400-outer-75.pdf
CircleFit(Planitude = 4.082748162430154, Alatude = [ 2.61635602  2.6982448 ])
CircleFit(Planitude = 2.7491762529760972, Alatude = [ 2.40823872  2.55841308])
CircleFit(Planitude = 2.602928235369464, Alatude = [ 2.43870218  2.49614324])
CircleFit(Planitude = 2.7491762529760972, Alatude = [ 2.40823872  2.55841308])
#### #### #### #### #### #### #### #### #### #### 
Creating 000-400-outer-80.pdf
CircleFit(Planitude = 4.082748162430154, Alatude = [ 2.61635602  2.6982448 ])
CircleFit(Planitude = 2.7491762529760972, Alatude = [ 2.40823872  2.55841308])
CircleFit(Planitude = 2.7491762529760972, Alatude = [ 2.40823872  2.55841308])
CircleFit(Planitude = 2.7491762529760972, Alatude = [ 2.40823872  2.55841308])
#### #### #### #### #### #### #### #### #### #### 
Creating 000-400-ridge-45.pdf
CircleFit(Planitude = 4.967816690867612, Alatude = [ 2.93269813  3.13737686])
CircleFit(Planitude = 6.159477975665889, Alatude = [ 3.49366528  2.10161637])
CircleFit(Planitude = 8.34245226369428, Alatude = [ 3.41930177  2.15261946])
CircleFit(Planitude = 8.34245226369428, Alatude = [ 3.41930177  2.15261946])
#### #### #### #### #### #### #### #### #### #### 
Creating 000-400-ridge-50.pdf
CircleFit(Planitude = 4.967816690867612, Alatude = [ 2.93269813  3.13737686])
CircleFit(Planitude = 3.6575972905349134, Alatude = [ 3.30546862  2.1581432 ])
CircleFit(Planitude = 8.34245226369428, Alatude = [ 3.41930177  2.15261946])
CircleFit(Planitude = 8.34245226369428, Alatude = [ 3.41930177  2.15261946])
#### #### #### #### #### #### #### #### #### #### 
Creating 000-400-ridge-55.pdf
CircleFit(Planitude = 4.967816690867612, Alatude = [ 2.93269813  3.13737686])
CircleFit(Planitude = 3.6575972905349134, Alatude = [ 3.30546862  2.1581432 ])
CircleFit(Planitude = 4.342688070224162, Alatude = [ 3.52014766  2.05143468])
CircleFit(Planitude = 4.342688070224162, Alatude = [ 3.52014766  2.05143468])
#### #### #### #### #### #### #### #### #### #### 
Creating 000-400-ridge-60.pdf
CircleFit(Planitude = 4.967816690867612, Alatude = [ 2.93269813  3.13737686])
CircleFit(Planitude = 2.9889442370073316, Alatude = [ 3.33962553  2.09212458])
CircleFit(Planitude = 3.2622581791594762, Alatude = [ 3.37769271  2.08824559])
CircleFit(Planitude = 3.2622581791594762, Alatude = [ 3.37769271  2.08824559])
#### #### #### #### #### #### #### #### #### #### 
Creating 000-400-ridge-65.pdf
CircleFit(Planitude = 4.967816690867612, Alatude = [ 2.93269813  3.13737686])
CircleFit(Planitude = 2.9889442370073316, Alatude = [ 3.33962553  2.09212458])
CircleFit(Planitude = 4.217268850449185, Alatude = [ 3.31945322  2.19582004])
CircleFit(Planitude = 4.217268850449185, Alatude = [ 3.31945322  2.19582004])
#### #### #### #### #### #### #### #### #### #### 
Creating 000-400-ridge-70.pdf
CircleFit(Planitude = 4.967816690867612, Alatude = [ 2.93269813  3.13737686])
CircleFit(Planitude = 3.318260555092649, Alatude = [ 3.16200474  2.25735718])
CircleFit(Planitude = 3.663809279406942, Alatude = [ 3.22543663  2.24241749])
CircleFit(Planitude = 3.663809279406942, Alatude = [ 3.22543663  2.24241749])
#### #### #### #### #### #### #### #### #### #### 
Creating 000-400-ridge-75.pdf
CircleFit(Planitude = 4.967816690867612, Alatude = [ 2.93269813  3.13737686])
CircleFit(Planitude = 3.318260555092649, Alatude = [ 3.16200474  2.25735718])
CircleFit(Planitude = 3.318260555092649, Alatude = [ 3.16200474  2.25735718])
CircleFit(Planitude = 3.318260555092649, Alatude = [ 3.16200474  2.25735718])
#### #### #### #### #### #### #### #### #### #### 
Creating 000-400-ridge-80.pdf
CircleFit(Planitude = 4.967816690867612, Alatude = [ 2.93269813  3.13737686])
CircleFit(Planitude = 2.9080380001255186, Alatude = [ 3.08578284  2.25119554])
CircleFit(Planitude = 3.6421288513183048, Alatude = [ 3.13032277  2.32781293])
CircleFit(Planitude = 3.6421288513183048, Alatude = [ 3.13032277  2.32781293])
#+end_example



*** 000-400 summary tables for \Delta\theta = 60\deg \to 80\deg
+ Note that the error form ~vmeane~ gives +/- std err of mean, which is \sigma/\sqrt{n}
+ However, since the uncertainties are systematic, not random, we should not be dividing by \sqrt{n} at all
+ So the last row gives the actual \sigma (~vsdev~), which is a better estimate of the uncertainty 

#+name: 000-400-inner-stats
|    |              Pi |              \Lambda- |              \Lambda+ |               \Lambda |              \Delta\Lambda |
|----+-----------------+-----------------+-----------------+-----------------+-----------------|
| 60 |     3.163487198 |      2.91822408 |      1.99889837 |           2.459 |           0.460 |
| 65 |     2.691843382 |      2.79468727 |      2.02103903 |           2.408 |           0.387 |
| 70 |      2.91154208 |      2.73912333 |      2.05740144 |           2.398 |           0.341 |
| 75 |     2.720995436 |      2.65410672 |      2.06889856 |           2.362 |           0.293 |
| 80 |     2.858244223 |      2.61112006 |      2.10063207 |           2.356 |           0.255 |
|----+-----------------+-----------------+-----------------+-----------------+-----------------|
|    | 2.869 +/- 0.084 | 2.743 +/- 0.054 | 2.049 +/- 0.018 | 2.397 +/- 0.019 | 0.347 +/- 0.036 |
|    |           0.188 |           0.121 |           0.040 |           0.041 |           0.080 |
#+TBLFM: $5=vmean([$-1, $-2]);f3::$6=($-3 - $-2)/2 ;f3::@7$2..@7$6=vmeane(@I..@II);f3::@8$2..@8$6=vsdev(@I..@II);f3

#+name: 000-400-ridge-stats
|    |              Pi |              \Lambda- |              \Lambda+ |               \Lambda |               \Delta |
|----+-----------------+-----------------+-----------------+-----------------+-----------------|
| 60 |     3.262258179 |      3.37769271 |      2.08824559 |           2.733 |           0.645 |
| 65 |      4.21726885 |      3.31945322 |      2.19582004 |           2.758 |           0.562 |
| 70 |      3.66380927 |      3.22543663 |      2.24241749 |           2.734 |           0.492 |
| 75 |      3.31826055 |      3.16200474 |      2.25735718 |           2.710 |           0.452 |
| 80 |     3.642128851 |      3.13032277 |      2.32781293 |           2.729 |           0.401 |
|----+-----------------+-----------------+-----------------+-----------------+-----------------|
|    | 3.621 +/- 0.170 | 3.243 +/- 0.047 | 2.222 +/- 0.040 | 2.733 +/- 0.008 | 0.510 +/- 0.043 |
|    |           0.380 |           0.104 |           0.089 |           0.017 |           0.096 |
#+TBLFM: $5=vmean([$-1, $-2]);f3::$6=($-3 - $-2)/2 ;f3::@7$2..@7$6=vmeane(@I..@II);f3::@8$2..@8$6=vsdev(@I..@II);f3

#+name: 000-400-outer-stats
|    |              Pi |              \Lambda- |              \Lambda+ |               \Lambda |               \Delta\Lambda |
|----+-----------------+-----------------+-----------------+-----------------+------------------|
| 60 |     2.186326606 |      2.36793785 |      2.51169028 |           2.440 |           -0.072 |
| 65 |    2.3958351503 |      2.42306254 |      2.47884924 |           2.451 |           -0.028 |
| 70 |    2.4781225108 |      2.40200279 |      2.51540495 |           2.459 |           -0.057 |
| 75 |    2.7491762529 |      2.40823872 |      2.55841308 |           2.483 |           -0.075 |
| 80 |    2.7491762529 |      2.40823872 |      2.55841308 |           2.483 |           -0.075 |
|----+-----------------+-----------------+-----------------+-----------------+------------------|
|    | 2.512 +/- 0.108 | 2.402 +/- 0.009 | 2.525 +/- 0.015 | 2.463 +/- 0.009 | -0.061 +/- 0.009 |
|    |           0.241 |           0.021 |           0.034 |           0.019 |            0.020 |
#+TBLFM: $5=vmean([$-1, $-2]);f3::$6=($-3 - $-2)/2 ;f3::@7$2..@7$6=vmeane(@I..@II);f3::@8$2..@8$6=vsdev(@I..@II);f3

#+name: 000-400-all-stats
|    |            Pi |            \Lambda- |            \Lambda+ |             \Lambda |            \Delta\Lambda |
|----+---------------+---------------+---------------+---------------+---------------|
| 60 |   3.163487198 |    2.91822408 |    1.99889837 |         2.459 |         0.291 |
| 65 |   2.691843382 |    2.79468727 |    2.02103903 |         2.408 |         0.287 |
| 70 |    2.91154208 |    2.73912333 |    2.05740144 |         2.398 |         0.234 |
| 75 |   2.720995436 |    2.65410672 |    2.06889856 |         2.362 |         0.215 |
| 80 |   2.858244223 |    2.61112006 |    2.10063207 |         2.356 |         0.179 |
| 60 |   3.262258179 |    3.37769271 |    2.08824559 |         2.733 |         0.395 |
| 65 |    4.21726885 |    3.31945322 |    2.19582004 |         2.758 |         0.266 |
| 70 |    3.66380927 |    3.22543663 |    2.24241749 |         2.734 |         0.268 |
| 75 |    3.31826055 |    3.16200474 |    2.25735718 |         2.710 |         0.273 |
| 80 |   3.642128851 |    3.13032277 |    2.32781293 |         2.729 |         0.220 |
| 60 |   2.186326606 |    2.36793785 |    2.51169028 |         2.440 |        -0.066 |
| 65 |  2.3958351503 |    2.42306254 |    2.47884924 |         2.451 |        -0.023 |
| 70 |  2.4781225108 |    2.40200279 |    2.51540495 |         2.459 |        -0.046 |
| 75 |  2.7491762529 |    2.40823872 |    2.55841308 |         2.483 |        -0.055 |
| 80 |  2.7491762529 |    2.40823872 |    2.55841308 |         2.483 |        -0.055 |
|----+---------------+---------------+---------------+---------------+---------------|
|    | 3.00 +/- 0.14 | 2.80 +/- 0.09 | 2.27 +/- 0.05 | 2.53 +/- 0.04 | 0.16 +/- 0.04 |
|    |          0.54 |          0.37 |          0.21 |          0.15 |          0.16 |
#+TBLFM: $5=vmean([$-1, $-2]);f3::$6=($-3 - $-2)/$2 ;f3::@17$2..@17$6=vmeane(@I..@II);f2::@18$2..@18$6=vsdev(@I..@II);f2

*** Results of fits
+ Results using |\theta| < 75\deg:
  | Curve   |               \Pi |              \Lambda- |              \Lambda+ |
  |---------+-----------------+-----------------+-----------------|
  | Inner   |           2.721 |           2.654 |           2.069 |
  | Ridge   |           3.318 |           3.162 |           2.257 |
  | Outer A |           2.603 |           2.439 |           2.496 |
  | Outer B |           2.749 |           2.408 |           2.558 |
  |---------+-----------------+-----------------+-----------------|
  |         | 2.848 +/- 0.160 | 2.666 +/- 0.174 | 2.345 +/- 0.113 |
  #+TBLFM: @6$2..@6$4=vmeane(@I..@II);f3
  - There are two entries for the Outer because the iteration converges on a limit cycle between 2 points, rather than a single point
  - Seems "limit cycle" is not the correct term.  "Periodic point" is better. This is "a pair of period-2 points which together form an attracting sequence"
+ Results using |\theta| < 60\deg:
  | Curve |               \Pi |              \Lambda- |              \Lambda+ |
  |-------+-----------------+-----------------+-----------------|
  | Inner |           3.164 |           2.918 |           1.999 |
  | Ridge |           3.262 |           3.378 |           2.088 |
  | Outer |           2.186 |           2.368 |           2.512 |
  |-------+-----------------+-----------------+-----------------|
  |       | 2.871 +/- 0.344 | 2.888 +/- 0.292 | 2.200 +/- 0.158 |
  #+TBLFM: @5$2..@5$4=vmeane(@I..@II);f3
  - This time, all of the arcs converge in 3 or 4 iterations
+ Old results using |\theta_c| < 25\deg, when we still measured angle at center of curvature, not star:
  | Curve   |               \Pi |              \Lambda- |              \Lambda+ |
  |---------+-----------------+-----------------+-----------------|
  | Inner A |           3.164 |           2.918 |           1.999 |
  | Inner B |           2.692 |           2.795 |           2.021 |
  | Ridge   |           3.664 |           3.225 |           2.242 |
  | Outer   |           1.087 |           1.913 |           2.545 |
  |---------+-----------------+-----------------+-----------------|
  |         | 2.652 +/- 0.558 | 2.713 +/- 0.281 | 2.202 +/- 0.127 |
  #+TBLFM: @6$2..@6$4=vmeane(@I..@II);f3
  - This one is not so good: We have a limit cycle for inner, and outer has not converged and is heading towards a low \Pi

Make a graph of it
#+BEGIN_SRC python :eval no :tangle 000-400-planitude-alatude.py
  import sys
  import numpy as np
  from scipy.interpolate import interp1d
  import statsmodels.api as sm
  from astropy.table import Table
  from matplotlib import pyplot as plt
  import matplotlib.ticker
  import seaborn as sns


  plotfile = sys.argv[0].replace('.py', '.pdf')

  sns.set_style('ticks')
  sns.set_color_codes()
  fig, ax = plt.subplots(figsize=(4, 4))

  Rc_grid = np.linspace(0.0, 10.0, 2000)
  R90_T0_grid = np.sqrt(2*Rc_grid)
  R90_T1_grid = np.sqrt(2*Rc_grid - 1.0)
  R90_T1_grid[~np.isfinite(R90_T1_grid)] = 0.0 

  ax.fill_between(Rc_grid, R90_T1_grid, R90_T0_grid, color='k', alpha=0.2)
  ax.fill_between(Rc_grid, R90_T0_grid, color='k', alpha=0.1)
  ax.plot(Rc_grid, R90_T0_grid, c='k', lw=0.5)
  ax.axhline(1.0, lw=0.5, alpha=0.5, color='k', zorder=-1)
  ax.axvline(1.0, lw=0.5, alpha=0.5, color='k', zorder=-1)
  ax.axhline(2.0, ls=':', lw=0.5, alpha=0.5, color='k', zorder=-1)
  ax.axvline(2.0, ls=':', lw=0.5, alpha=0.5, color='k', zorder=-1)
  ax.plot([0.9, 10.0], [0.9, 10.0], lw=0.5, alpha=0.5, color='k', zorder=-1)

  # Put a cross at the Wilkinoid coordinates: [5/3, sqrt(3)]
  ax.plot([5./3.], [np.sqrt(3.0)], '+', c='w', ms=10, alpha=1.0)

  labels = {
      "Inner": 1.7,
      "Outer A": 2.8,
      "Ridge": 3.5,
  }
  for arcid, Pi, Lam_minus, Lam_plus in [
          ["Inner", 2.721, 2.654, 2.069],
          ["Ridge", 3.318, 3.162, 2.257],
          ["Outer A", 2.603, 2.439, 2.496],
          ["Outer B", 2.749, 2.408, 2.558],
          ["Inner 60", 3.164, 2.918, 1.999],
          ["Ridge 60", 3.262, 3.378, 2.088],
          ["Outer 60", 2.186, 2.368, 2.512],
  ]:

      if "Ridge" in arcid:
          color = 'r'
      elif "Inner" in arcid:
          color = 'm'
      elif "Outer" in arcid:
          color = 'c'
      if "60" in arcid:
          sym = '.'
          lw = 0.7
      else:
          sym = 'o'
          lw = 1.5
      ax.plot([Pi, Pi], [Lam_minus, Lam_plus], '-', color=color, lw=lw)
      ax.plot([Pi, Pi], [Lam_minus, Lam_plus], sym, color=color)
      if arcid in labels:
          ax.text(Pi, labels[arcid], arcid.split()[0], color=color, ha='center')

  ax.text(2.5, 1.2, "M42 000-400")
  ax.set(
      xlim=[0., 5.1],
      ylim=[0., 5.1],
      #yticks=range(6),
      xlabel=r"Fitted planitude: $\Pi'$",
      ylabel=r"Fitted alatude: $\Lambda'$",
  )        
  sns.despine()
  fig.tight_layout(pad=0.5)
  fig.savefig(plotfile)
  print(plotfile, end='')



#+END_SRC

#+BEGIN_SRC sh :results file
python 000-400-planitude-alatude.py
#+END_SRC

#+RESULTS:
[[file:000-400-planitude-alatude.pdf]]

#+BEGIN_SRC sh :results verbatim
FILES="*-planitude-alatude.pdf *-Pi-vs-Dtheta.pdf"
date
cp -v $FILES ../papers/Papers1234/figs
#+END_SRC

#+RESULTS:
: Fri Mar  2 09:40:16 CST 2018
: 000-400-planitude-alatude.pdf -> ../papers/Papers1234/figs/000-400-planitude-alatude.pdf
: 069-601-planitude-alatude.pdf -> ../papers/Papers1234/figs/069-601-planitude-alatude.pdf
: 000-400-Pi-vs-Dtheta.pdf -> ../papers/Papers1234/figs/000-400-Pi-vs-Dtheta.pdf
: 069-601-Pi-vs-Dtheta.pdf -> ../papers/Papers1234/figs/069-601-Pi-vs-Dtheta.pdf


*** Look at the variation in \Pi' with \Delta\theta
#+name: planitude-Dtheta
| D theta | Outer | Ridge | Inner |
|---------+-------+-------+-------|
|      45 | 1.775 | 8.342 | 3.312 |
|      50 | 1.775 | 8.342 | 2.771 |
|      55 | 2.153 | 4.343 | 3.163 |
|      60 | 2.186 | 3.262 | 3.163 |
|      65 | 2.395 | 4.217 | 2.692 |
|      70 | 2.478 | 3.664 | 2.911 |
|      75 | 2.749 | 3.318 | 2.721 |
|      80 | 2.749 | 3.642 | 2.858 |
|---------+-------+-------+-------|
|  Median | 2.291 | 3.941 | 2.885 |
|     MAD | 0.323 | 0.513 | 0.179 |
#+TBLFM: @10$2..@10$4=vmedian(@I..@II);f3::@11$2..@11$4=vmedian(map(lambda(x, abs(x - @-1)), @I..@II));f3

Test that we can read in the data

#+header: :var INPUT=planitude-Dtheta
#+BEGIN_SRC python :return tab :results verbatim
from astropy.table import Table
tab = Table(rows=INPUT[1:9], names=INPUT[0])
#+END_SRC

#+RESULTS:
#+begin_example
D theta Outer Ridge Inner
------- ----- ----- -----
     45 1.775 8.342 3.312
     50 1.775 8.342 2.771
     55 2.153 4.343 3.163
     60 2.186 3.262 3.163
     65 2.395 4.217 2.692
     70 2.478 3.664 2.911
     75 2.749 3.318 2.721
     80 2.749 3.642 2.858
#+end_example

#+header: :var INPUT=planitude-Dtheta
#+BEGIN_SRC python :eval no :tangle 000-400-Pi-vs-Dtheta.py 
  import sys
  import numpy as np
  from astropy.table import Table
  from matplotlib import pyplot as plt
  import seaborn as sns

  tab = Table(rows=INPUT[1:9], names=INPUT[0])

  figfile = sys.argv[0].replace('.py', '.pdf')

  sns.set_color_codes()

  fig, ax = plt.subplots(figsize=(4, 4))
  arcs = "Inner", "Outer", "Ridge"
  colors = 'mcr'
  m = tab['D theta'] >= 60.0
  for arc, color in zip(arcs, colors):
      mean = np.mean(tab[arc][m])
      sigma = np.std(tab[arc][m])
      label = fr"{arc}: ${mean:.1f} \pm {sigma:.1f}$"
      ax.plot(tab['D theta'], tab[arc], 'o', color=color, label=label)
  ax.legend(title="M42 000-400")
  ax.axvspan(60.0, 80.0, color='0.9')
  ax.set(ylim=[0.0, 9.0],
         xlabel=r"$\Delta \theta$, degrees",
         xticks=tab['D theta'],
         ylabel=r"Fitted planitude $\Pi'$")
  sns.despine(trim=True)
  fig.tight_layout()
  fig.savefig(figfile)
  print(figfile, end='')
#+END_SRC

#+BEGIN_SRC sh :results file
python 000-400-Pi-vs-Dtheta.py 
#+END_SRC

#+RESULTS:
[[file:000-400-Pi-vs-Dtheta.pdf]]

** TODO Making images of the LL object fits
Copy region files because we will need them
#+BEGIN_SRC sh :results verbatim  :eval no
cp -v ~/Dropbox/LuisBowshocks/j8oc*_wcs/*-forma.reg .
#+END_SRC

#+RESULTS:
#+begin_example
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/065-502-forma.reg -> ./065-502-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/074-229-forma.reg -> ./074-229-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/083-435-forma.reg -> ./083-435-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/101-233-forma.reg -> ./101-233-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/102-157-forma.reg -> ./102-157-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/106-245-forma.reg -> ./106-245-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/109-246-forma.reg -> ./109-246-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/117-421-forma.reg -> ./117-421-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/121-434-forma.reg -> ./121-434-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/142-301-forma.reg -> ./142-301-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/154-225-forma.reg -> ./154-225-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/154-240-forma.reg -> ./154-240-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/158-323-forma.reg -> ./158-323-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/159-221-forma.reg -> ./159-221-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/161-324-forma.reg -> ./161-324-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/163-222-forma.reg -> ./163-222-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/163-317-forma.reg -> ./163-317-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/165-235-forma.reg -> ./165-235-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/166-316-forma.reg -> ./166-316-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/167-317-forma.reg -> ./167-317-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/168-326-forma.reg -> ./168-326-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/168-326N-forma.reg -> ./168-326N-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/168-328-forma.reg -> ./168-328-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/169-338-forma.reg -> ./169-338-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/170-249-forma.reg -> ./170-249-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/173-236-forma.reg -> ./173-236-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/173-342-forma.reg -> ./173-342-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/175-321-forma.reg -> ./175-321-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/177-341-forma.reg -> ./177-341-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/178-258-forma.reg -> ./178-258-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/180-331-forma.reg -> ./180-331-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/189-329-forma.reg -> ./189-329-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/LL1-forma.reg -> ./LL1-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/w005-514-forma.reg -> ./w005-514-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/w012-407-forma.reg -> ./w012-407-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/w014-414-forma.reg -> ./w014-414-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/w030-524-forma.reg -> ./w030-524-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/w044-527-forma.reg -> ./w044-527-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/w069-601-forma.reg -> ./w069-601-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc01010_wcs/w073-227-forma.reg -> ./w073-227-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc02010_wcs/131-046-forma.reg -> ./131-046-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc02010_wcs/132-053-forma.reg -> ./132-053-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc02010_wcs/206-043-forma.reg -> ./206-043-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc06010_wcs/204-330-forma.reg -> ./204-330-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc06010_wcs/212-400-forma.reg -> ./212-400-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc06010_wcs/w266-558-forma.reg -> ./w266-558-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc07010_wcs/261-3018-forma.reg -> ./261-3018-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc07010_wcs/305-811-forma.reg -> ./305-811-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc07010_wcs/LL5-forma.reg -> ./LL5-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc08010_wcs/308-3036-forma.reg -> ./308-3036-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc08010_wcs/344-3020-forma.reg -> ./344-3020-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc08010_wcs/362-3137-forma.reg -> ./362-3137-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc08010_wcs/LL6-forma.reg -> ./LL6-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc09010_wcs/049-143-forma.reg -> ./049-143-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc09010_wcs/051-024-forma.reg -> ./051-024-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc09010_wcs/072-134-forma.reg -> ./072-134-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc09010_wcs/4578-251-forma.reg -> ./4578-251-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc09010_wcs/w000-400-forma.reg -> ./w000-400-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc14010_wcs/066-3251-forma.reg -> ./066-3251-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc14010_wcs/116-3101-forma.reg -> ./116-3101-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc14010_wcs/119-3155-forma.reg -> ./119-3155-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc14010_wcs/136-3057-forma.reg -> ./136-3057-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc14010_wcs/138-3024-forma.reg -> ./138-3024-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc14010_wcs/203-3039-forma.reg -> ./203-3039-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc16010_wcs/022-635-forma.reg -> ./022-635-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc16010_wcs/041-637-forma.reg -> ./041-637-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc16010_wcs/042-628-forma.reg -> ./042-628-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc16010_wcs/4582-635-forma.reg -> ./4582-635-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc16010_wcs/w005-514-forma.reg -> ./w005-514-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc17010_wcs/4468-605-forma.reg -> ./4468-605-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc17010_wcs/LL3-forma.reg -> ./LL3-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc18010_wcs/LL2-forma.reg -> ./LL2-forma.reg
/Users/will/Dropbox/LuisBowshocks/j8oc24010_wcs/LL4-forma.reg -> ./LL4-forma.reg
#+end_example

This requires various steps.  At the moment, I am missing the =*-arcfits.reg= files, so I will postpone it for now

#+BEGIN_SRC sh :results verbatim :eval no
python ../read-shapes-LL/extract-image.py 042-628
python ../read-shapes-LL/arc_brightness.py 042-628
python ../read-shapes-LL/plot-image.py 042-628 --image Bally_16
#+END_SRC


* The red supergiants and AGB stars 
:PROPERTIES:
:ID:       A3F62646-04B8-448B-91FF-8E1DC04A9C41
:END:
+ Observational data done in [[id:94EECFDB-B61E-4242-89C2-09BD3B36D587][RSG stars (and AGB)]]

#+name: harvest-radii-rc-rsg
#+BEGIN_SRC python :return table
  import json

  SOURCES = ['alphaori', 'uuaur', 'rleo', 'rhya', 'v1943sgr', 'xpav', 'mucep',
             'cwleo', 'epaqr', 'khicyg', 'rcas', 'rtvir', 'waql',
             'wpic', 'rscl', 'tetaps', ]

  radii_header = ['R0/100', 'Rc/R0', 'R90/R0', 'Rm90/R0']
  header = [['Source', *radii_header], None]
  INVALID = -999.00
  body = []
  for source in SOURCES:
      jfile = f'../Stellar-Bowshocks-2017/RSG/{source}-arcdata.json'
      data = json.load(open(jfile))
      assert source == data['star']['id']
      D = data['star']['D']
      row = [source]
      arc = 'outer'
      if arc in data:
          R0 = data[arc]['R0']
          Rc = data[arc]['Rc'] / R0
          if 'R90' in data[arc]:
              Rm90, R90 = data[arc]['R90']
              if Rm90 > 0.0:
                  Rm90 /= R0
              if R90 > 0.0:
                  R90 /= R0
          else:
              Rm90, R90 = INVALID, INVALID
          row += [f'{_:.2f}' for _ in [R0/100.0, Rc, Rm90, R90]]
      else:
          row += [f'{_:.2f}' for _ in [INVALID, INVALID, INVALID, INVALID]]
      body.append(row)

  #body.sort(key=lambda x: x[0])
  table = header + body

#+END_SRC

#+RESULTS: harvest-radii-rc-rsg
| Source   | R0/100 | Rc/R0 |  R90/R0 | Rm90/R0 |
|----------+--------+-------+---------+---------|
| alphaori |   3.70 |  1.43 |    1.38 |    1.43 |
| uuaur    |   0.78 |  1.31 |    1.22 |    1.39 |
| rleo     |   0.85 |  1.43 |    1.29 |    1.39 |
| rhya     |   0.89 |  1.48 |    1.46 |    1.69 |
| v1943sgr |   0.53 |  1.34 |    1.42 |    1.20 |
| xpav     |   0.48 |  1.51 |    1.48 |    1.50 |
| mucep    |   0.70 |  1.56 |    1.52 |    1.26 |
| cwleo    |   4.68 |  1.53 |    1.41 |    1.60 |
| epaqr    |   0.31 |  2.18 |    1.62 | -999.00 |
| khicyg   |   2.86 |  1.47 |    1.35 | -999.00 |
| rcas     |   0.85 |  1.65 |    1.56 |    1.46 |
| rtvir    |   0.87 |  1.13 |    1.25 |    1.38 |
| waql     |   0.42 |  1.28 |    1.39 | -999.00 |
| wpic     |   0.28 |  1.60 |    1.45 | -999.00 |
| rscl     |   0.48 |  1.23 |    1.31 | -999.00 |
| tetaps   |   0.57 |  1.53 | -999.00 |    1.29 |



** Old results

| Source   | R0/100 | Rc/R0 | R90/R0 | Rm90/R0 |
|----------+--------+-------+--------+---------|
| alphaori |   3.66 |  1.45 |   1.40 |    1.44 |
| uuaur    |   0.82 |  1.36 |   1.14 | -999.00 |
| rleo     |   0.90 |  1.40 |   1.31 |    1.39 |
| rhya     |   1.06 |  1.57 |   1.13 |    2.03 |
| v1943sgr |   0.64 |  1.30 |   1.34 |    1.39 |
| xpav     |   0.55 |  1.43 |   1.43 |    1.37 |
| mucep    |   0.70 |  1.47 |   1.57 |    1.32 |

* The runaway OB stars
